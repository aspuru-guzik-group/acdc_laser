Index: recommendations/general/ChemicalReaction.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/recommendations/general/ChemicalReaction.py b/recommendations/general/ChemicalReaction.py
new file mode 100644
--- /dev/null	(date 1660667391965)
+++ b/recommendations/general/ChemicalReaction.py	(date 1660667391965)
@@ -0,0 +1,179 @@
+import itertools
+import random
+import string
+from typing import List, Tuple, Optional, Union
+import networkx
+import numpy as np
+from networkx.exception import NodeNotFound, NetworkXNoPath
+from networkx import DiGraph
+from rdkit import Chem
+from rdkit.Chem import rdChemReactions
+
+
+class ChemicalReaction:
+
+    """
+    Class for Describing and Enumerating Simple and more Complex Chemical Reactions.
+    Based on a Reaction-SMARTS, possible reaction products and intermediates are enumerated using a reaction network
+    approach (implemented using RdKit and NetworkX).
+    """
+
+    def __init__(self, *reaction_smarts):
+        """
+        Instantiates a ChemicalReaction object by setting up a list of RDKit reaction objects (reactions), and a
+        list of matching SMARTS patterns per reaction..
+
+        Args:
+            reaction_smarts: SMARTS string(s) describing the chemical transformation(s).
+
+        ATTN: Probably, the implementation with nested iterations is not the most efficient for larger networks
+              Think about a numpy-ish implementation of the whole thing (np.vectorize(lambda x: ...))
+        """
+        to_reaction = np.vectorize(lambda x: rdChemReactions.ReactionFromSmarts(x))
+        mol_from_smarts = np.vectorize(lambda x: Chem.MolFromSmarts(x))
+
+        self.reactions: np.ndarray = to_reaction(reaction_smarts)
+        self.reactants: np.ndarray = np.asarray(
+            mol_from_smarts([smarts.split(">>")[0].split(".") for smarts in reaction_smarts])
+        )
+
+        self.network = None
+
+    def __call__(self, *reactants, max_iterations=5) -> Union[str, List[str]]:
+        return self.generate_reaction_network(*reactants, max_iterations=max_iterations)
+
+    def generate_reaction_network(
+            self,
+            *reactants,
+            max_iterations: Optional[int] = 5,
+            return_type: str = "product"
+    ) -> Union[str, List[str], DiGraph]:
+        """
+        Generates a reaction network starting from the reactant nodes through iterative network expansion.
+        Network expansion is terminated when
+            - the network is not expanded in an iteration
+            - the maximum number of iterations has been reached
+
+        Args:
+             reactants: List of SMILES strings of reactants to construct the reaction network from.
+             max_iterations (optional): Maximum iterations to generate the network.
+             return_type (optional): What to return ("product" -> SMILES of product(s) as str or list;
+                                                     "compounds" -> SMILES of all intermediates as list;
+                                                     "network" -> NetworkX.DiGraph object)
+        """
+        self.network = DiGraph()
+
+        for smiles in reactants:
+            self._add_node(smiles)
+
+        graph_size = 0
+        for _ in range(max_iterations):
+            self._expand_network()
+
+            if self.network.number_of_nodes() == graph_size:
+                break
+            graph_size = self.network.number_of_nodes()
+
+        if return_type == "product":
+            products = [node for node in self.network.nodes() if self.network.out_degree(node) == 0]
+            return products[0] if len(products) == 1 else products
+        elif return_type == "compounds":
+            return [node for node in self.network if self.network.nodes[node]["type"]]
+        elif return_type == "network":
+            return self.network
+
+    def _expand_network(self) -> None:
+        """
+        Expands the reaction network by evaluating all possible permutations between reaction nodes.
+        """
+        # Per reactant, get a list of nodes which match the SMARTS pattern and can serve as reactant
+        # ATTN: This Loop should be converted to numpy
+        reaction_matches = []
+        for i, reaction_smarts in enumerate(self.reactants):
+            reactant_matches = []
+            for j in range(len(reaction_smarts)):
+                matches = [
+                    node for node in self.network
+                    if self.network.nodes[node]["type"] and self.network.nodes[node]["smarts"][i][j]
+                ]
+                reactant_matches.append(matches)
+            reaction_matches.append(reactant_matches)
+
+        # Enumerate all possible reactant combinations, generate the products and, if applicable, expand the network
+        # ATTN: Is there a way to convert this loop to numpy (given that itertools is more efficient than np?)
+        for i, reaction in enumerate(reaction_matches):
+            for reactants in itertools.product(*reaction):
+                possible_products = self.reactions[i].RunReactants([self.network.nodes[mol]["mol"] for mol in reactants])
+                for products in possible_products:
+                    products = [Chem.MolToSmiles(mol) for mol in products]
+                    self._check_add_reaction(reactants, products)
+
+    def _check_add_reaction(self, reactants: tuple, products: list) -> None:
+        """
+        Checks if a reaction from reactants to products is in the graph (i.e. if there is a path from each reactant
+        to each product with the Path weight of 1). If not, calls the method for adding a new reaction.
+
+        Args:
+              reactants: Tuple of SMILES strings of the reactants
+              products: Tuple of SMILES strings of the products
+        """
+
+        for reactant_prod_permutation in itertools.product(reactants, products):
+            try:
+                if not networkx.shortest_path_length(self.network, *reactant_prod_permutation, weight="weight") == 1:
+                    return self._add_reaction(reactants, products)
+            except (NodeNotFound, NetworkXNoPath):
+                return self._add_reaction(reactants, products)
+
+    def _add_reaction(self, reactants: Tuple, products: List) -> None:
+        """
+        Adds a new reaction to the graph by
+            - creating a dummy node
+            - adding the reactant / product nodes, if they don't exist
+            - adding the directed paths between reactants and dummy node (weight = 0), and the dummy node and products
+              (weight = 1)
+
+        Args:
+            reactants: Tuple of SMILES strings of the reactants
+            products: Tuple of SMILES strings of the products
+        """
+        rxn_node = self._add_dummy_node()
+
+        for molecule in reactants:
+            self._add_node(molecule)
+            self.network.add_edge(molecule, rxn_node, weight=0)
+
+        for molecule in products:
+            self._add_node(molecule)
+            self.network.add_edge(rxn_node, molecule, weight=1)
+
+    def _add_node(self, smiles: str) -> None:
+        """
+        Adds a node to the reaction network, if it does not already exist.
+        Sets the node features "mol_object" (Chem.Mol) and i (bool for i in range(self.reactants)).
+
+        Args:
+            smiles: Canonical SMILES of the molecule to be added.
+        """
+        if smiles not in self.network:
+
+            mol_object = Chem.MolFromSmiles(smiles)
+            has_mol_match = np.vectorize(lambda x: mol_object.HasSubstructMatch(x))
+            smarts_matches: np.ndarray = has_mol_match(self.reactants)
+
+            self.network.add_node(smiles, type="molecule", mol=mol_object, smarts=smarts_matches)
+
+    def _add_dummy_node(self) -> str:
+        """
+        Adds a dummy node to the graph in self.network. Generates a random 10-character identifier for the node,
+        and returns the identifier.
+
+        Returns:
+             str: Generated node identifier
+        """
+        identifier = "__" + "".join(random.choices(string.ascii_lowercase, k=8))
+        if not identifier in self.network:
+            self.network.add_node(identifier, type=None)
+            return identifier
+        else:
+            return self._add_dummy_node()
\ No newline at end of file
Index: notebooks/test_add_data.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"id\": \"da94d5a2\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"The autoreload extension is already loaded. To reload it, use:\\n\",\n      \"  %reload_ext autoreload\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"%load_ext autoreload\\n\",\n    \"%autoreload 2\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"id\": \"e2554c24\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import pandas as pd\\n\",\n    \"from molar import ClientConfig, Client\\n\",\n    \"import rdkit\\n\",\n    \"import rdkit.Chem as chem\\n\",\n    \"import rdkit.Chem.AllChem as allchem\\n\",\n    \"\\n\",\n    \"from molar_interface import MolarInterface\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"id\": \"2b3a44a9\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# define user details\\n\",\n    \"user_details = {\\n\",\n    \"    'email':'riley.hickman13@gmail.com',\\n\",\n    \"    'password':'az1$jH5v',\\n\",\n    \"}\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"id\": \"742fab5c\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"mol = MolarInterface(user_details, database_name='madness_laser_test') # client in client attribute\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"id\": \"1b54686f\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'email': 'riley.hickman13@gmail.com',\\n\",\n       \" 'is_superuser': False,\\n\",\n       \" 'is_active': True,\\n\",\n       \" 'full_name': 'rileyhickman',\\n\",\n       \" 'created_on': '2022-01-18T19:16:33.241173',\\n\",\n       \" 'user_id': 3}\"\n      ]\n     },\n     \"execution_count\": 19,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"mol.client.test_token()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"1e7d80f1\",\n   \"metadata\": {},\n   \"source\": [\n    \"## MolarInterface functionality\\n\",\n    \"\\n\",\n    \"### Querying data from DB\\n\",\n    \"\\n\",\n    \"'AVAILABLE', 'ACQUIRED',  'PROCESSING',  'SYNTHESIZED',  'SHIPPED',  'RECEIVED',  'DONE', 'FAILED'\\n\",\n    \"\\n\",\n    \"* get_synthesis_details(identifier)  --> get details about a specifc synthesis from the DB\\n\",\n    \"* get_syntheses(lab, instrument, status) --> details about all the syntheses set to a particular status (see above)\\n\",\n    \"* get_target_molecule(identifier, identifier_type='hid') --> queries database for a specific target molecule\\n\",\n    \"* get_fragment_details(identifier, identifier_type='hid') --> get details about specific fragment (ID, SMILES, CAS)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"### Writing data to the DB\\n\",\n    \"\\n\",\n    \"* create_target_compund(smiles, fragment_a, fragment_b, fragment_c, fragment_identifier='hid') --> creates all entries for the synthesis of a new compound (molecule, molecule_molecule, synthesis)\\n\",\n    \"* update_synthesis_status(identifier, status, identifier_type='hid') --> updates the status of a synthesis\\n\",\n    \"* update_optics_data(identifier, optics_data, identifier_type='hid')\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 33,\n   \"id\": \"fa8342e1\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>synthesis.synthesis_id</th>\\n\",\n       \"      <th>synthesis.status</th>\\n\",\n       \"      <th>synthesis.molecule_id</th>\\n\",\n       \"      <th>lab.name</th>\\n\",\n       \"      <th>machine.machine_id</th>\\n\",\n       \"      <th>product.smiles</th>\\n\",\n       \"      <th>fragment_a.hid</th>\\n\",\n       \"      <th>fragment_a.smiles</th>\\n\",\n       \"      <th>fragment_b.hid</th>\\n\",\n       \"      <th>fragment_b.smiles</th>\\n\",\n       \"      <th>fragment_c.hid</th>\\n\",\n       \"      <th>fragment_c.smiles</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>292f21b5-1953-4762-94cb-4722f8c720bc</td>\\n\",\n       \"      <td>available</td>\\n\",\n       \"      <td>5acc0682-2fd8-4934-9e58-881bd5b038ec</td>\\n\",\n       \"      <td>Toronto</td>\\n\",\n       \"      <td>f158c26e-a94e-4994-9a95-de324aa1da23</td>\\n\",\n       \"      <td>CCCCCCCCCCCCCC</td>\\n\",\n       \"      <td>A027</td>\\n\",\n       \"      <td>Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...</td>\\n\",\n       \"      <td>B002</td>\\n\",\n       \"      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\\n\",\n       \"      <td>C121</td>\\n\",\n       \"      <td>Cc1nc(NN)c(Br)cc1Br</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>230b32ce-acd4-46a8-859d-d0b71e15f039</td>\\n\",\n       \"      <td>available</td>\\n\",\n       \"      <td>0b0b9fdf-df94-4316-ae89-5628601d6dcc</td>\\n\",\n       \"      <td>Toronto</td>\\n\",\n       \"      <td>f158c26e-a94e-4994-9a95-de324aa1da23</td>\\n\",\n       \"      <td>CCCCCCCCCCCCCCCCCCC</td>\\n\",\n       \"      <td>A027</td>\\n\",\n       \"      <td>Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...</td>\\n\",\n       \"      <td>B002</td>\\n\",\n       \"      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\\n\",\n       \"      <td>C121</td>\\n\",\n       \"      <td>Cc1nc(NN)c(Br)cc1Br</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>919e10b2-261e-4604-b494-20e560ab517b</td>\\n\",\n       \"      <td>available</td>\\n\",\n       \"      <td>97e4b1fb-a1c1-40b9-a4dc-c5715bba40e6</td>\\n\",\n       \"      <td>Toronto</td>\\n\",\n       \"      <td>f158c26e-a94e-4994-9a95-de324aa1da23</td>\\n\",\n       \"      <td>CCCCCCCCCCCCCCCCC</td>\\n\",\n       \"      <td>A027</td>\\n\",\n       \"      <td>Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...</td>\\n\",\n       \"      <td>B002</td>\\n\",\n       \"      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\\n\",\n       \"      <td>C121</td>\\n\",\n       \"      <td>Cc1nc(NN)c(Br)cc1Br</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>22ec7d60-ba7d-4147-9a04-df564714f1f8</td>\\n\",\n       \"      <td>available</td>\\n\",\n       \"      <td>b3e77fd2-683b-450a-913c-97998dcff2e0</td>\\n\",\n       \"      <td>Toronto</td>\\n\",\n       \"      <td>f158c26e-a94e-4994-9a95-de324aa1da23</td>\\n\",\n       \"      <td>CCCCCCCCCCCCCCCCCC</td>\\n\",\n       \"      <td>A027</td>\\n\",\n       \"      <td>Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...</td>\\n\",\n       \"      <td>B002</td>\\n\",\n       \"      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\\n\",\n       \"      <td>C121</td>\\n\",\n       \"      <td>Cc1nc(NN)c(Br)cc1Br</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>70d5265a-76e5-41ce-9a5d-0bd7b4cec93f</td>\\n\",\n       \"      <td>available</td>\\n\",\n       \"      <td>29d07431-c3fd-4538-a2a1-2f7362e76068</td>\\n\",\n       \"      <td>Toronto</td>\\n\",\n       \"      <td>f158c26e-a94e-4994-9a95-de324aa1da23</td>\\n\",\n       \"      <td>CCCCCCCCCCCCCCCCCCCCCCCCC</td>\\n\",\n       \"      <td>A027</td>\\n\",\n       \"      <td>Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...</td>\\n\",\n       \"      <td>B002</td>\\n\",\n       \"      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\\n\",\n       \"      <td>C121</td>\\n\",\n       \"      <td>Cc1nc(NN)c(Br)cc1Br</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                 synthesis.synthesis_id synthesis.status  \\\\\\n\",\n       \"0  292f21b5-1953-4762-94cb-4722f8c720bc        available   \\n\",\n       \"1  230b32ce-acd4-46a8-859d-d0b71e15f039        available   \\n\",\n       \"2  919e10b2-261e-4604-b494-20e560ab517b        available   \\n\",\n       \"3  22ec7d60-ba7d-4147-9a04-df564714f1f8        available   \\n\",\n       \"4  70d5265a-76e5-41ce-9a5d-0bd7b4cec93f        available   \\n\",\n       \"\\n\",\n       \"                  synthesis.molecule_id lab.name  \\\\\\n\",\n       \"0  5acc0682-2fd8-4934-9e58-881bd5b038ec  Toronto   \\n\",\n       \"1  0b0b9fdf-df94-4316-ae89-5628601d6dcc  Toronto   \\n\",\n       \"2  97e4b1fb-a1c1-40b9-a4dc-c5715bba40e6  Toronto   \\n\",\n       \"3  b3e77fd2-683b-450a-913c-97998dcff2e0  Toronto   \\n\",\n       \"4  29d07431-c3fd-4538-a2a1-2f7362e76068  Toronto   \\n\",\n       \"\\n\",\n       \"                     machine.machine_id             product.smiles  \\\\\\n\",\n       \"0  f158c26e-a94e-4994-9a95-de324aa1da23             CCCCCCCCCCCCCC   \\n\",\n       \"1  f158c26e-a94e-4994-9a95-de324aa1da23        CCCCCCCCCCCCCCCCCCC   \\n\",\n       \"2  f158c26e-a94e-4994-9a95-de324aa1da23          CCCCCCCCCCCCCCCCC   \\n\",\n       \"3  f158c26e-a94e-4994-9a95-de324aa1da23         CCCCCCCCCCCCCCCCCC   \\n\",\n       \"4  f158c26e-a94e-4994-9a95-de324aa1da23  CCCCCCCCCCCCCCCCCCCCCCCCC   \\n\",\n       \"\\n\",\n       \"  fragment_a.hid                                  fragment_a.smiles  \\\\\\n\",\n       \"0           A027  Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...   \\n\",\n       \"1           A027  Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...   \\n\",\n       \"2           A027  Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...   \\n\",\n       \"3           A027  Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...   \\n\",\n       \"4           A027  Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...   \\n\",\n       \"\\n\",\n       \"  fragment_b.hid                       fragment_b.smiles fragment_c.hid  \\\\\\n\",\n       \"0           B002  C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C121   \\n\",\n       \"1           B002  C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C121   \\n\",\n       \"2           B002  C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C121   \\n\",\n       \"3           B002  C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C121   \\n\",\n       \"4           B002  C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C121   \\n\",\n       \"\\n\",\n       \"     fragment_c.smiles  \\n\",\n       \"0  Cc1nc(NN)c(Br)cc1Br  \\n\",\n       \"1  Cc1nc(NN)c(Br)cc1Br  \\n\",\n       \"2  Cc1nc(NN)c(Br)cc1Br  \\n\",\n       \"3  Cc1nc(NN)c(Br)cc1Br  \\n\",\n       \"4  Cc1nc(NN)c(Br)cc1Br  \"\n      ]\n     },\n     \"execution_count\": 33,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# get the syntheses\\n\",\n    \"df = mol.get_syntheses(lab='Toronto', instrument='ChemSpeed', status='available')\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 35,\n   \"id\": \"78e31ddb\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>synthesis.synthesis_id</th>\\n\",\n       \"      <th>synthesis.status</th>\\n\",\n       \"      <th>synthesis.molecule_id</th>\\n\",\n       \"      <th>fragment_a.hid</th>\\n\",\n       \"      <th>fragment_a.smiles</th>\\n\",\n       \"      <th>fragment_b.hid</th>\\n\",\n       \"      <th>fragment_b.smiles</th>\\n\",\n       \"      <th>fragment_c.hid</th>\\n\",\n       \"      <th>fragment_c.smiles</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>292f21b5-1953-4762-94cb-4722f8c720bc</td>\\n\",\n       \"      <td>available</td>\\n\",\n       \"      <td>5acc0682-2fd8-4934-9e58-881bd5b038ec</td>\\n\",\n       \"      <td>A027</td>\\n\",\n       \"      <td>Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...</td>\\n\",\n       \"      <td>B002</td>\\n\",\n       \"      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\\n\",\n       \"      <td>C121</td>\\n\",\n       \"      <td>Cc1nc(NN)c(Br)cc1Br</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                 synthesis.synthesis_id synthesis.status  \\\\\\n\",\n       \"0  292f21b5-1953-4762-94cb-4722f8c720bc        available   \\n\",\n       \"\\n\",\n       \"                  synthesis.molecule_id fragment_a.hid  \\\\\\n\",\n       \"0  5acc0682-2fd8-4934-9e58-881bd5b038ec           A027   \\n\",\n       \"\\n\",\n       \"                                   fragment_a.smiles fragment_b.hid  \\\\\\n\",\n       \"0  Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...           B002   \\n\",\n       \"\\n\",\n       \"                        fragment_b.smiles fragment_c.hid    fragment_c.smiles  \\n\",\n       \"0  C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C121  Cc1nc(NN)c(Br)cc1Br  \"\n      ]\n     },\n     \"execution_count\": 35,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# get synthesis details\\n\",\n    \"df = mol.get_synthesis_details(identifier='292f21b5-1953-4762-94cb-4722f8c720bc')\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 44,\n   \"id\": \"1b4125bb\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"KeyError\",\n     \"evalue\": \"'molecule_id'\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mKeyError\\u001b[0m                                  Traceback (most recent call last)\",\n      \"\\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexes/base.py\\u001b[0m in \\u001b[0;36mget_loc\\u001b[0;34m(self, key, method, tolerance)\\u001b[0m\\n\\u001b[1;32m   3360\\u001b[0m             \\u001b[0;32mtry\\u001b[0m\\u001b[0;34m:\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m-> 3361\\u001b[0;31m                 \\u001b[0;32mreturn\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_engine\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mget_loc\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mcasted_key\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[1;32m   3362\\u001b[0m             \\u001b[0;32mexcept\\u001b[0m \\u001b[0mKeyError\\u001b[0m \\u001b[0;32mas\\u001b[0m \\u001b[0merr\\u001b[0m\\u001b[0;34m:\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/_libs/index.pyx\\u001b[0m in \\u001b[0;36mpandas._libs.index.IndexEngine.get_loc\\u001b[0;34m()\\u001b[0m\\n\",\n      \"\\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/_libs/index.pyx\\u001b[0m in \\u001b[0;36mpandas._libs.index.IndexEngine.get_loc\\u001b[0;34m()\\u001b[0m\\n\",\n      \"\\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\\u001b[0m in \\u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\\u001b[0;34m()\\u001b[0m\\n\",\n      \"\\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\\u001b[0m in \\u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\\u001b[0;34m()\\u001b[0m\\n\",\n      \"\\u001b[0;31mKeyError\\u001b[0m: 'molecule_id'\",\n      \"\\nThe above exception was the direct cause of the following exception:\\n\",\n      \"\\u001b[0;31mKeyError\\u001b[0m                                  Traceback (most recent call last)\",\n      \"\\u001b[0;32m/tmp/ipykernel_767372/2777994717.py\\u001b[0m in \\u001b[0;36m<module>\\u001b[0;34m\\u001b[0m\\n\\u001b[1;32m      2\\u001b[0m mol.update_synthesis_status(identifier='A027B002C121',\\n\\u001b[1;32m      3\\u001b[0m                             \\u001b[0mstatus\\u001b[0m\\u001b[0;34m=\\u001b[0m\\u001b[0;34m'DONE'\\u001b[0m\\u001b[0;34m,\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m----> 4\\u001b[0;31m                             \\u001b[0midentifier_type\\u001b[0m\\u001b[0;34m=\\u001b[0m\\u001b[0;34m'hid'\\u001b[0m\\u001b[0;34m,\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[1;32m      5\\u001b[0m                         )\\n\",\n      \"\\u001b[0;32m~/Research_Local/acdc-lasers/notebooks/molar_interface.py\\u001b[0m in \\u001b[0;36mupdate_synthesis_status\\u001b[0;34m(self, identifier, status, identifier_type)\\u001b[0m\\n\\u001b[1;32m    356\\u001b[0m             \\u001b[0;32mraise\\u001b[0m \\u001b[0mKeyError\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0;34m\\\"The desired target status is not available in the database.\\\"\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m    357\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m--> 358\\u001b[0;31m         \\u001b[0mtarget_molecule_id\\u001b[0m \\u001b[0;34m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mget_target_molecule\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0midentifier\\u001b[0m\\u001b[0;34m,\\u001b[0m \\u001b[0midentifier_type\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mat\\u001b[0m\\u001b[0;34m[\\u001b[0m\\u001b[0;36m0\\u001b[0m\\u001b[0;34m,\\u001b[0m \\u001b[0;34m\\\"molecule_id\\\"\\u001b[0m\\u001b[0;34m]\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[1;32m    359\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m    360\\u001b[0m         target_synthesis = self.client.query_database(\\n\",\n      \"\\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexing.py\\u001b[0m in \\u001b[0;36m__getitem__\\u001b[0;34m(self, key)\\u001b[0m\\n\\u001b[1;32m   2273\\u001b[0m             \\u001b[0;32mreturn\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mobj\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mloc\\u001b[0m\\u001b[0;34m[\\u001b[0m\\u001b[0mkey\\u001b[0m\\u001b[0;34m]\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   2274\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m-> 2275\\u001b[0;31m         \\u001b[0;32mreturn\\u001b[0m \\u001b[0msuper\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m__getitem__\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mkey\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[1;32m   2276\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   2277\\u001b[0m     \\u001b[0;32mdef\\u001b[0m \\u001b[0m__setitem__\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[0;34m,\\u001b[0m \\u001b[0mkey\\u001b[0m\\u001b[0;34m,\\u001b[0m \\u001b[0mvalue\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m:\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexing.py\\u001b[0m in \\u001b[0;36m__getitem__\\u001b[0;34m(self, key)\\u001b[0m\\n\\u001b[1;32m   2220\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   2221\\u001b[0m         \\u001b[0mkey\\u001b[0m \\u001b[0;34m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_convert_key\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mkey\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m-> 2222\\u001b[0;31m         \\u001b[0;32mreturn\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mobj\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_get_value\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0;34m*\\u001b[0m\\u001b[0mkey\\u001b[0m\\u001b[0;34m,\\u001b[0m \\u001b[0mtakeable\\u001b[0m\\u001b[0;34m=\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_takeable\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[1;32m   2223\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   2224\\u001b[0m     \\u001b[0;32mdef\\u001b[0m \\u001b[0m__setitem__\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[0;34m,\\u001b[0m \\u001b[0mkey\\u001b[0m\\u001b[0;34m,\\u001b[0m \\u001b[0mvalue\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m:\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/frame.py\\u001b[0m in \\u001b[0;36m_get_value\\u001b[0;34m(self, index, col, takeable)\\u001b[0m\\n\\u001b[1;32m   3566\\u001b[0m             \\u001b[0;32mreturn\\u001b[0m \\u001b[0mseries\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_values\\u001b[0m\\u001b[0;34m[\\u001b[0m\\u001b[0mindex\\u001b[0m\\u001b[0;34m]\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   3567\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m-> 3568\\u001b[0;31m         \\u001b[0mseries\\u001b[0m \\u001b[0;34m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_get_item_cache\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mcol\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[1;32m   3569\\u001b[0m         \\u001b[0mengine\\u001b[0m \\u001b[0;34m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mindex\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_engine\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   3570\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/frame.py\\u001b[0m in \\u001b[0;36m_get_item_cache\\u001b[0;34m(self, item)\\u001b[0m\\n\\u001b[1;32m   3882\\u001b[0m             \\u001b[0;31m#  pending resolution of GH#33047\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   3883\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m-> 3884\\u001b[0;31m             \\u001b[0mloc\\u001b[0m \\u001b[0;34m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mcolumns\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mget_loc\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mitem\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[1;32m   3885\\u001b[0m             \\u001b[0mvalues\\u001b[0m \\u001b[0;34m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_mgr\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0miget\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mloc\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   3886\\u001b[0m             \\u001b[0mres\\u001b[0m \\u001b[0;34m=\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_box_col_values\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mvalues\\u001b[0m\\u001b[0;34m,\\u001b[0m \\u001b[0mloc\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m__finalize__\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mself\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexes/base.py\\u001b[0m in \\u001b[0;36mget_loc\\u001b[0;34m(self, key, method, tolerance)\\u001b[0m\\n\\u001b[1;32m   3361\\u001b[0m                 \\u001b[0;32mreturn\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0m_engine\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mget_loc\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mcasted_key\\u001b[0m\\u001b[0;34m)\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   3362\\u001b[0m             \\u001b[0;32mexcept\\u001b[0m \\u001b[0mKeyError\\u001b[0m \\u001b[0;32mas\\u001b[0m \\u001b[0merr\\u001b[0m\\u001b[0;34m:\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m-> 3363\\u001b[0;31m                 \\u001b[0;32mraise\\u001b[0m \\u001b[0mKeyError\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mkey\\u001b[0m\\u001b[0;34m)\\u001b[0m \\u001b[0;32mfrom\\u001b[0m \\u001b[0merr\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[1;32m   3364\\u001b[0m \\u001b[0;34m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m   3365\\u001b[0m         \\u001b[0;32mif\\u001b[0m \\u001b[0mis_scalar\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mkey\\u001b[0m\\u001b[0;34m)\\u001b[0m \\u001b[0;32mand\\u001b[0m \\u001b[0misna\\u001b[0m\\u001b[0;34m(\\u001b[0m\\u001b[0mkey\\u001b[0m\\u001b[0;34m)\\u001b[0m \\u001b[0;32mand\\u001b[0m \\u001b[0;32mnot\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[0;34m.\\u001b[0m\\u001b[0mhasnans\\u001b[0m\\u001b[0;34m:\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0;34m\\u001b[0m\\u001b[0m\\n\",\n      \"\\u001b[0;31mKeyError\\u001b[0m: 'molecule_id'\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# update synthesis status\\n\",\n    \"mol.update_synthesis_status(identifier='A027B002C121',\\n\",\n    \"                            status='DONE',\\n\",\n    \"                            identifier_type='hid',\\n\",\n    \"                        )\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 40,\n   \"id\": \"82e32bb6\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>synthesis.synthesis_id</th>\\n\",\n       \"      <th>synthesis.status</th>\\n\",\n       \"      <th>synthesis.molecule_id</th>\\n\",\n       \"      <th>fragment_a.hid</th>\\n\",\n       \"      <th>fragment_a.smiles</th>\\n\",\n       \"      <th>fragment_b.hid</th>\\n\",\n       \"      <th>fragment_b.smiles</th>\\n\",\n       \"      <th>fragment_c.hid</th>\\n\",\n       \"      <th>fragment_c.smiles</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>292f21b5-1953-4762-94cb-4722f8c720bc</td>\\n\",\n       \"      <td>available</td>\\n\",\n       \"      <td>5acc0682-2fd8-4934-9e58-881bd5b038ec</td>\\n\",\n       \"      <td>A027</td>\\n\",\n       \"      <td>Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...</td>\\n\",\n       \"      <td>B002</td>\\n\",\n       \"      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\\n\",\n       \"      <td>C121</td>\\n\",\n       \"      <td>Cc1nc(NN)c(Br)cc1Br</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                 synthesis.synthesis_id synthesis.status  \\\\\\n\",\n       \"0  292f21b5-1953-4762-94cb-4722f8c720bc        available   \\n\",\n       \"\\n\",\n       \"                  synthesis.molecule_id fragment_a.hid  \\\\\\n\",\n       \"0  5acc0682-2fd8-4934-9e58-881bd5b038ec           A027   \\n\",\n       \"\\n\",\n       \"                                   fragment_a.smiles fragment_b.hid  \\\\\\n\",\n       \"0  Cc1ccc2c(c1)c1cc(C)ccc1n2-c1ccc(B2OC(C)(C)C(C)...           B002   \\n\",\n       \"\\n\",\n       \"                        fragment_b.smiles fragment_c.hid    fragment_c.smiles  \\n\",\n       \"0  C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C121  Cc1nc(NN)c(Br)cc1Br  \"\n      ]\n     },\n     \"execution_count\": 40,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"df = mol.get_synthesis_details(identifier='292f21b5-1953-4762-94cb-4722f8c720bc')\\n\",\n    \"df.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 46,\n   \"id\": \"b85a91b0\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>molecule_id</th>\\n\",\n       \"      <th>created_on</th>\\n\",\n       \"      <th>updated_on</th>\\n\",\n       \"      <th>smiles</th>\\n\",\n       \"      <th>molecule_type_id</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>5acc0682-2fd8-4934-9e58-881bd5b038ec</td>\\n\",\n       \"      <td>2022-02-02T16:53:52.339694</td>\\n\",\n       \"      <td>2022-02-02T16:53:52.339694</td>\\n\",\n       \"      <td>CCCCCCCCCCCCCC</td>\\n\",\n       \"      <td>a06a38b6-78b6-4fcc-8a61-3fe9d0af7cea</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                            molecule_id                  created_on  \\\\\\n\",\n       \"0  5acc0682-2fd8-4934-9e58-881bd5b038ec  2022-02-02T16:53:52.339694   \\n\",\n       \"\\n\",\n       \"                   updated_on          smiles  \\\\\\n\",\n       \"0  2022-02-02T16:53:52.339694  CCCCCCCCCCCCCC   \\n\",\n       \"\\n\",\n       \"                       molecule_type_id  \\n\",\n       \"0  a06a38b6-78b6-4fcc-8a61-3fe9d0af7cea  \"\n      ]\n     },\n     \"execution_count\": 46,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"mol.get_target_molecule(identifier='5acc0682-2fd8-4934-9e58-881bd5b038ec', identifier_type='molecule_id')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 48,\n   \"id\": \"269c0597\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>molecule_molecule_id</th>\\n\",\n       \"      <th>created_on</th>\\n\",\n       \"      <th>updated_on</th>\\n\",\n       \"      <th>fragment_a</th>\\n\",\n       \"      <th>fragment_b</th>\\n\",\n       \"      <th>fragment_c</th>\\n\",\n       \"      <th>molecule_id</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>288904db-93ed-4cd9-a408-20fd562beca6</td>\\n\",\n       \"      <td>2022-02-01T22:33:36.442040</td>\\n\",\n       \"      <td>2022-02-01T22:33:36.442040</td>\\n\",\n       \"      <td>c48d4657-acde-42f1-86ed-ad85bf0f3b5f</td>\\n\",\n       \"      <td>5e02fe87-04eb-4d8e-b2d4-78f2ae025546</td>\\n\",\n       \"      <td>5b92973e-a494-429f-a7a6-ae45a421bcfb</td>\\n\",\n       \"      <td>db38dc00-a9b3-4c65-9632-2f17ff16568d</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1661a343-a837-4438-986b-e026a25755f3</td>\\n\",\n       \"      <td>2022-02-02T16:53:52.467010</td>\\n\",\n       \"      <td>2022-02-02T16:53:52.467010</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>5acc0682-2fd8-4934-9e58-881bd5b038ec</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>41bbfc39-7356-473f-91b5-bb0bc7a88af8</td>\\n\",\n       \"      <td>2022-02-02T17:01:39.479074</td>\\n\",\n       \"      <td>2022-02-02T17:01:39.479074</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>0b0b9fdf-df94-4316-ae89-5628601d6dcc</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>4389d2e7-922a-48ce-bbd2-78e4937c4f7c</td>\\n\",\n       \"      <td>2022-02-02T17:08:05.296666</td>\\n\",\n       \"      <td>2022-02-02T17:08:05.296666</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>b0711df4-5e11-42dc-b136-b87060cfa5ea</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>216eade7-7cd0-4bd6-b16b-9e8226162857</td>\\n\",\n       \"      <td>2022-02-02T17:13:39.764532</td>\\n\",\n       \"      <td>2022-02-02T17:13:39.764532</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>97e4b1fb-a1c1-40b9-a4dc-c5715bba40e6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>5</th>\\n\",\n       \"      <td>73ab3618-0c19-49bf-96de-4fb32e1d0577</td>\\n\",\n       \"      <td>2022-02-02T17:14:26.419078</td>\\n\",\n       \"      <td>2022-02-02T17:14:26.419078</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>b3e77fd2-683b-450a-913c-97998dcff2e0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>6</th>\\n\",\n       \"      <td>1633492d-be3a-48ae-bf42-09a036a972c8</td>\\n\",\n       \"      <td>2022-02-02T17:50:00.596877</td>\\n\",\n       \"      <td>2022-02-02T17:50:00.596877</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>29d07431-c3fd-4538-a2a1-2f7362e76068</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>7</th>\\n\",\n       \"      <td>36b60134-1da0-4991-b6b2-b436cbfd385e</td>\\n\",\n       \"      <td>2022-02-02T17:57:17.583248</td>\\n\",\n       \"      <td>2022-02-02T17:57:17.583248</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>568d6ebf-a2f6-4652-bcda-93d6c6a7133f</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>8</th>\\n\",\n       \"      <td>48a16b28-5912-489c-93ce-8f40a737b9b8</td>\\n\",\n       \"      <td>2022-02-02T17:59:41.474611</td>\\n\",\n       \"      <td>2022-02-02T17:59:41.474611</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>7e3457e5-3859-4be8-8159-d3ef25caf21f</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>9</th>\\n\",\n       \"      <td>5515bca7-c8ca-4eb2-9c5a-3c1d09a22de4</td>\\n\",\n       \"      <td>2022-02-02T18:30:39.540706</td>\\n\",\n       \"      <td>2022-02-02T18:30:39.540706</td>\\n\",\n       \"      <td>faa4de17-7959-4bc4-a071-de1fda1b8a05</td>\\n\",\n       \"      <td>80ae3faf-ebe1-4306-ab0b-7546691d09ab</td>\\n\",\n       \"      <td>e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c</td>\\n\",\n       \"      <td>2985090b-db2a-4d74-aa04-8307940d87f6</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"                   molecule_molecule_id                  created_on  \\\\\\n\",\n       \"0  288904db-93ed-4cd9-a408-20fd562beca6  2022-02-01T22:33:36.442040   \\n\",\n       \"1  1661a343-a837-4438-986b-e026a25755f3  2022-02-02T16:53:52.467010   \\n\",\n       \"2  41bbfc39-7356-473f-91b5-bb0bc7a88af8  2022-02-02T17:01:39.479074   \\n\",\n       \"3  4389d2e7-922a-48ce-bbd2-78e4937c4f7c  2022-02-02T17:08:05.296666   \\n\",\n       \"4  216eade7-7cd0-4bd6-b16b-9e8226162857  2022-02-02T17:13:39.764532   \\n\",\n       \"5  73ab3618-0c19-49bf-96de-4fb32e1d0577  2022-02-02T17:14:26.419078   \\n\",\n       \"6  1633492d-be3a-48ae-bf42-09a036a972c8  2022-02-02T17:50:00.596877   \\n\",\n       \"7  36b60134-1da0-4991-b6b2-b436cbfd385e  2022-02-02T17:57:17.583248   \\n\",\n       \"8  48a16b28-5912-489c-93ce-8f40a737b9b8  2022-02-02T17:59:41.474611   \\n\",\n       \"9  5515bca7-c8ca-4eb2-9c5a-3c1d09a22de4  2022-02-02T18:30:39.540706   \\n\",\n       \"\\n\",\n       \"                   updated_on                            fragment_a  \\\\\\n\",\n       \"0  2022-02-01T22:33:36.442040  c48d4657-acde-42f1-86ed-ad85bf0f3b5f   \\n\",\n       \"1  2022-02-02T16:53:52.467010  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"2  2022-02-02T17:01:39.479074  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"3  2022-02-02T17:08:05.296666  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"4  2022-02-02T17:13:39.764532  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"5  2022-02-02T17:14:26.419078  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"6  2022-02-02T17:50:00.596877  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"7  2022-02-02T17:57:17.583248  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"8  2022-02-02T17:59:41.474611  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"9  2022-02-02T18:30:39.540706  faa4de17-7959-4bc4-a071-de1fda1b8a05   \\n\",\n       \"\\n\",\n       \"                             fragment_b                            fragment_c  \\\\\\n\",\n       \"0  5e02fe87-04eb-4d8e-b2d4-78f2ae025546  5b92973e-a494-429f-a7a6-ae45a421bcfb   \\n\",\n       \"1  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"2  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"3  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"4  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"5  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"6  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"7  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"8  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"9  80ae3faf-ebe1-4306-ab0b-7546691d09ab  e10ae2cd-e8ad-499f-a9cb-6a0ca1b92a1c   \\n\",\n       \"\\n\",\n       \"                            molecule_id  \\n\",\n       \"0  db38dc00-a9b3-4c65-9632-2f17ff16568d  \\n\",\n       \"1  5acc0682-2fd8-4934-9e58-881bd5b038ec  \\n\",\n       \"2  0b0b9fdf-df94-4316-ae89-5628601d6dcc  \\n\",\n       \"3  b0711df4-5e11-42dc-b136-b87060cfa5ea  \\n\",\n       \"4  97e4b1fb-a1c1-40b9-a4dc-c5715bba40e6  \\n\",\n       \"5  b3e77fd2-683b-450a-913c-97998dcff2e0  \\n\",\n       \"6  29d07431-c3fd-4538-a2a1-2f7362e76068  \\n\",\n       \"7  568d6ebf-a2f6-4652-bcda-93d6c6a7133f  \\n\",\n       \"8  7e3457e5-3859-4be8-8159-d3ef25caf21f  \\n\",\n       \"9  2985090b-db2a-4d74-aa04-8307940d87f6  \"\n      ]\n     },\n     \"execution_count\": 48,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"mols = mol.client.query_database(\\n\",\n    \"        types='molecule_molecule',\\n\",\n    \")\\n\",\n    \"mols\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"6467219e\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"feas\",\n   \"language\": \"python\",\n   \"name\": \"feas\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.11\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/test_add_data.ipynb b/notebooks/test_add_data.ipynb
--- a/notebooks/test_add_data.ipynb	(revision adfadfc09f9ce7d148a07e8addd1c2df93f6d2aa)
+++ b/notebooks/test_add_data.ipynb	(date 1660606559031)
@@ -4,7 +4,11 @@
    "cell_type": "code",
    "execution_count": 12,
    "id": "da94d5a2",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "name": "stdout",
@@ -24,7 +28,11 @@
    "cell_type": "code",
    "execution_count": 13,
    "id": "e2554c24",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [],
    "source": [
     "import pandas as pd\n",
@@ -40,7 +48,11 @@
    "cell_type": "code",
    "execution_count": 14,
    "id": "2b3a44a9",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [],
    "source": [
     "# define user details\n",
@@ -54,7 +66,11 @@
    "cell_type": "code",
    "execution_count": 17,
    "id": "742fab5c",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [],
    "source": [
     "mol = MolarInterface(user_details, database_name='madness_laser_test') # client in client attribute\n"
@@ -64,7 +80,11 @@
    "cell_type": "code",
    "execution_count": 19,
    "id": "1b54686f",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -89,7 +109,11 @@
   {
    "cell_type": "markdown",
    "id": "1e7d80f1",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%% md\n"
+    }
+   },
    "source": [
     "## MolarInterface functionality\n",
     "\n",
@@ -115,7 +139,11 @@
    "cell_type": "code",
    "execution_count": 33,
    "id": "fa8342e1",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -291,7 +319,11 @@
    "cell_type": "code",
    "execution_count": 35,
    "id": "78e31ddb",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -371,31 +403,35 @@
    "cell_type": "code",
    "execution_count": 44,
    "id": "1b4125bb",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "ename": "KeyError",
      "evalue": "'molecule_id'",
      "output_type": "error",
      "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
-      "\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
-      "\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
-      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
-      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
-      "\u001b[0;31mKeyError\u001b[0m: 'molecule_id'",
+      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
+      "\u001B[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001B[0m in \u001B[0;36mget_loc\u001B[0;34m(self, key, method, tolerance)\u001B[0m\n\u001B[1;32m   3360\u001B[0m             \u001B[0;32mtry\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 3361\u001B[0;31m                 \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_engine\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mget_loc\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mcasted_key\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   3362\u001B[0m             \u001B[0;32mexcept\u001B[0m \u001B[0mKeyError\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0merr\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/_libs/index.pyx\u001B[0m in \u001B[0;36mpandas._libs.index.IndexEngine.get_loc\u001B[0;34m()\u001B[0m\n",
+      "\u001B[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/_libs/index.pyx\u001B[0m in \u001B[0;36mpandas._libs.index.IndexEngine.get_loc\u001B[0;34m()\u001B[0m\n",
+      "\u001B[0;32mpandas/_libs/hashtable_class_helper.pxi\u001B[0m in \u001B[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001B[0;34m()\u001B[0m\n",
+      "\u001B[0;32mpandas/_libs/hashtable_class_helper.pxi\u001B[0m in \u001B[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001B[0;34m()\u001B[0m\n",
+      "\u001B[0;31mKeyError\u001B[0m: 'molecule_id'",
       "\nThe above exception was the direct cause of the following exception:\n",
-      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
-      "\u001b[0;32m/tmp/ipykernel_767372/2777994717.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m mol.update_synthesis_status(identifier='A027B002C121',\n\u001b[1;32m      3\u001b[0m                             \u001b[0mstatus\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'DONE'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m                             \u001b[0midentifier_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'hid'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m                         )\n",
-      "\u001b[0;32m~/Research_Local/acdc-lasers/notebooks/molar_interface.py\u001b[0m in \u001b[0;36mupdate_synthesis_status\u001b[0;34m(self, identifier, status, identifier_type)\u001b[0m\n\u001b[1;32m    356\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The desired target status is not available in the database.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 358\u001b[0;31m         \u001b[0mtarget_molecule_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_target_molecule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midentifier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0midentifier_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mat\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"molecule_id\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m         target_synthesis = self.client.query_database(\n",
-      "\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2273\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2275\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2276\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2277\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2220\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2221\u001b[0m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2222\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2223\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2224\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, index, col, takeable)\u001b[0m\n\u001b[1;32m   3566\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3567\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3568\u001b[0;31m         \u001b[0mseries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_item_cache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3569\u001b[0m         \u001b[0mengine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3570\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_get_item_cache\u001b[0;34m(self, item)\u001b[0m\n\u001b[1;32m   3882\u001b[0m             \u001b[0;31m#  pending resolution of GH#33047\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3883\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3884\u001b[0;31m             \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3885\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3886\u001b[0m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_box_col_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;31mKeyError\u001b[0m: 'molecule_id'"
+      "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
+      "\u001B[0;32m/tmp/ipykernel_767372/2777994717.py\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m      2\u001B[0m mol.update_synthesis_status(identifier='A027B002C121',\n\u001B[1;32m      3\u001B[0m                             \u001B[0mstatus\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m'DONE'\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 4\u001B[0;31m                             \u001B[0midentifier_type\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0;34m'hid'\u001B[0m\u001B[0;34m,\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      5\u001B[0m                         )\n",
+      "\u001B[0;32m~/Research_Local/acdc-lasers/notebooks/molar_interface.py\u001B[0m in \u001B[0;36mupdate_synthesis_status\u001B[0;34m(self, identifier, status, identifier_type)\u001B[0m\n\u001B[1;32m    356\u001B[0m             \u001B[0;32mraise\u001B[0m \u001B[0mKeyError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m\"The desired target status is not available in the database.\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    357\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 358\u001B[0;31m         \u001B[0mtarget_molecule_id\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mget_target_molecule\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0midentifier\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0midentifier_type\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mat\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0;36m0\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m\"molecule_id\"\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    359\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    360\u001B[0m         target_synthesis = self.client.query_database(\n",
+      "\u001B[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexing.py\u001B[0m in \u001B[0;36m__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m   2273\u001B[0m             \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mobj\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mloc\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2274\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 2275\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0msuper\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m__getitem__\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   2276\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2277\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0m__setitem__\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mkey\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mvalue\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexing.py\u001B[0m in \u001B[0;36m__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m   2220\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2221\u001B[0m         \u001B[0mkey\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_convert_key\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 2222\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mobj\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_get_value\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mtakeable\u001B[0m\u001B[0;34m=\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_takeable\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   2223\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   2224\u001B[0m     \u001B[0;32mdef\u001B[0m \u001B[0m__setitem__\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mkey\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mvalue\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/frame.py\u001B[0m in \u001B[0;36m_get_value\u001B[0;34m(self, index, col, takeable)\u001B[0m\n\u001B[1;32m   3566\u001B[0m             \u001B[0;32mreturn\u001B[0m \u001B[0mseries\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_values\u001B[0m\u001B[0;34m[\u001B[0m\u001B[0mindex\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3567\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 3568\u001B[0;31m         \u001B[0mseries\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_get_item_cache\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mcol\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   3569\u001B[0m         \u001B[0mengine\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mindex\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_engine\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3570\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/frame.py\u001B[0m in \u001B[0;36m_get_item_cache\u001B[0;34m(self, item)\u001B[0m\n\u001B[1;32m   3882\u001B[0m             \u001B[0;31m#  pending resolution of GH#33047\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3883\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 3884\u001B[0;31m             \u001B[0mloc\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mcolumns\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mget_loc\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mitem\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   3885\u001B[0m             \u001B[0mvalues\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_mgr\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0miget\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mloc\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3886\u001B[0m             \u001B[0mres\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_box_col_values\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mvalues\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mloc\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m__finalize__\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mself\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;32m~/Software/anaconda3/envs/feas/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001B[0m in \u001B[0;36mget_loc\u001B[0;34m(self, key, method, tolerance)\u001B[0m\n\u001B[1;32m   3361\u001B[0m                 \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_engine\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mget_loc\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mcasted_key\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3362\u001B[0m             \u001B[0;32mexcept\u001B[0m \u001B[0mKeyError\u001B[0m \u001B[0;32mas\u001B[0m \u001B[0merr\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 3363\u001B[0;31m                 \u001B[0;32mraise\u001B[0m \u001B[0mKeyError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;32mfrom\u001B[0m \u001B[0merr\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   3364\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   3365\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mis_scalar\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;32mand\u001B[0m \u001B[0misna\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mkey\u001B[0m\u001B[0;34m)\u001B[0m \u001B[0;32mand\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mhasnans\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
+      "\u001B[0;31mKeyError\u001B[0m: 'molecule_id'"
      ]
     }
    ],
@@ -411,7 +447,11 @@
    "cell_type": "code",
    "execution_count": 40,
    "id": "82e32bb6",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -490,7 +530,11 @@
    "cell_type": "code",
    "execution_count": 46,
    "id": "b85a91b0",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -557,7 +601,11 @@
    "cell_type": "code",
    "execution_count": 48,
    "id": "269c0597",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [
     {
      "data": {
@@ -760,7 +808,11 @@
    "cell_type": "code",
    "execution_count": null,
    "id": "6467219e",
-   "metadata": {},
+   "metadata": {
+    "pycharm": {
+     "name": "#%%\n"
+    }
+   },
    "outputs": [],
    "source": []
   }
@@ -786,4 +838,4 @@
  },
  "nbformat": 4,
  "nbformat_minor": 5
-}
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1660596492435)
+++ b/.gitignore	(date 1660596492435)
@@ -0,0 +1,1 @@
+/recommendations/round_3/.env
Index: recommendations/general/.env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/recommendations/general/.env b/recommendations/general/.env
new file mode 100644
--- /dev/null	(date 1660586159633)
+++ b/recommendations/general/.env	(date 1660586159633)
@@ -0,0 +1,2 @@
+MOLAR_USER = "f.striethkalthoff@utoronto.ca"
+MOLAR_PASSWORD = "sinbet-6meBzi-mupzuh"
\ No newline at end of file
Index: recommendations/general/MolarInterface.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/recommendations/general/MolarInterface.py b/recommendations/general/MolarInterface.py
new file mode 100644
--- /dev/null	(date 1660589176013)
+++ b/recommendations/general/MolarInterface.py	(date 1660589176013)
@@ -0,0 +1,912 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+# @Author: Felix Strieth-Kalthoff
+import pandas as pd
+import time
+import os
+from typing import Union, Callable, Tuple
+from pathlib import Path
+
+from molar import Client, ClientConfig
+from molar.exceptions import MolarBackendError
+import requests
+from requests.exceptions import ConnectionError
+import magic
+from dotenv import load_dotenv
+
+
+load_dotenv()
+
+
+class MolarInterface:
+
+    status_possible = ('AVAILABLE', 'ACQUIRED', 'PROCESSING', 'SYNTHESIZED', 'SHIPPED', 'RECEIVED', 'DONE', 'FAILED')
+
+    def __init__(self, db_name: str, fragments: Union[tuple, list, set]):
+        """
+        Initializes the client to interact with the MOLAR.
+
+        Args:
+            db_name: Name of the database.
+            fragments: List or tuple of all database fragments.
+        """
+        self._database = db_name
+        self._login()
+        self._verify_connection()
+        self._fragments: list = list(fragments)
+
+    def _login(self) -> None:
+        """
+        Creates a user client by logging in to the MOLAR.
+        """
+        self._config = ClientConfig(
+            server_url="https://molar.cs.toronto.edu",
+            database_name=self._database,
+            email=os.environ["MOLAR_USER"],
+            password=os.environ["MOLAR_PASSWORD"]
+        )
+        self._client = Client(self._config)
+
+    def _verify_connection(self) -> None:
+        """
+        Verifies connection to the MOLAR by client.test_token().
+        Returns if connection was verified. Otherwise rises a value error.
+        """
+        try:
+            test_token = self._client.test_token()
+            if test_token["is_active"]:
+                return
+            else:
+                raise KeyError("Problem")
+
+        except (KeyError, MolarBackendError, AttributeError, ConnectionError):
+            raise RuntimeError("Database connection could not be properly established!")
+
+    def establish_connection(self, attempt: int = 0) -> None:
+        """
+        Tries to establish connection to the MOLAR.
+        Returns if connection was verified. Otherwise tries again (up to five times with 60 seconds waiting in between).
+        Terminates the code otherwise.
+
+        Parameters:
+             attempt (int): counter of the attempt (for recursive function calls)
+        """
+        try:
+            self._verify_connection()
+            return
+
+        except RuntimeError:
+            if attempt > 5:
+                print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
+                print("!!! ERROR – DATABASE COULD NOT BE REACHED AFTER FIVE ATTEMPTS !!!")
+                print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
+                os._exit(1)
+            else:
+                print("Problem with the MOLAR connection. Re–trying in one minute. ")
+                time.sleep(60)
+                self._login()
+                attempt = attempt+1
+                return self.establish_connection(attempt)
+
+    @staticmethod
+    def _run_with_connection(function: Callable) -> Callable:
+        """
+        Decorator to be applied to the MOLAR query functions.
+        Static method, so needs to be applied as @_run_with_connection.__get__(0)
+
+        Verifies MOLAR connection before executing function.
+
+        Catches MolarBackendErrors (e.g. for invalid UUIDs etc.). Returns None in these cases.
+        """
+        def wrapper(self, *args, **kwargs):
+            try:
+                self.establish_connection()
+                return function(self, *args, **kwargs)
+            except MolarBackendError as e:
+                print(f"!!! MolarBackendError encountered in function {function.__name__} !!!")
+                print(e)
+                return None
+        return wrapper
+
+    @_run_with_connection.__get__(0)
+    def _get_token(self) -> str:
+        """
+        Get a token for uploading files to the MOLAR.
+        """
+        return self._client.token
+
+    ################################
+    # FETCH DATA FROM THE DATABASE #
+    ################################
+
+    @_run_with_connection.__get__(0)
+    def get_synthesis_details(self, identifier: str, identifier_type: str = "hid"):
+        """
+        Fetches the details about a specific synthesis from the MOLAR.
+
+        Parameters:
+            identifier (str): Identifier of the target_zone molecule
+            identifier_type (str): Which identifier to use ("molecule_id", "hid" (default), "smiles")
+
+
+        Returns:
+            details (pandas.DataFrame): Dataframe of details for the respective experiment.
+        """
+        request = self._client.query_database(
+            types=[
+                "synthesis",
+                "molecule_molecule.molecule_id",
+                "product",
+                *self._fragments
+            ],
+            limit=1000,
+            joins=[
+                {
+                    "type": "molecule_molecule",
+                    "on": {
+                        "column1": "synthesis.molecule_id",
+                        "column2": "molecule_molecule.molecule_id"
+                    }
+                },
+                {
+                    "type": "product",
+                    "on": {
+                        "column1": "product.molecule_id",
+                        "column2": "molecule_molecule.molecule_id"
+                    }
+                },
+                *[
+                    {
+                        "type": frag,
+                        "on": {
+                            "column1": f"{frag}.molecule_id",
+                            "column2": f"molecule_molecule.{frag}"
+                        }
+                    }
+                    for frag in self._fragments
+                ]
+            ],
+            aliases=[
+                {
+                    "type": "molecule",
+                    "alias": "product"
+                },
+                *[
+                    {
+                        "type": "molecule",
+                        "alias": frag
+                    }
+                    for frag in self._fragments
+                ]
+            ],
+            filters={
+                "type": f"product.{identifier_type}",
+                "op": "==",
+                "value": identifier
+            }
+        )
+
+        if request.empty:
+            raise KeyError(f"The synthesis {identifier} ({identifier_type}) does not exist in the MOLAR.")
+        else:
+            return request[
+                [
+                    "synthesis.synthesis_id",
+                    "synthesis.status",
+                    "synthesis.molecule_id",
+                    *[f"{frag}.{col}" for frag in self._fragments for col in ("hid", "smiles")]
+                ]
+            ]
+
+    @_run_with_connection.__get__(0)
+    def get_syntheses(self, lab: str, instrument: str, status: str) -> Union[None, pd.DataFrame]:
+        """
+        Fetches the details about all syntheses set to a specific status (e.g. "available") for a specific lab and instrument.
+
+        Parameters:
+            lab (str): Name of the lab
+            instrument (str): Name of the instrument.
+            status (str): Status of the syntheses to be fetched
+
+        Returns:
+            pending_syntheses (Union[None, pd.DataFrame])
+        """
+        request = self._client.query_database(
+            types=[
+                "synthesis",
+                "molecule_molecule.molecule_id",
+                "lab.name",
+                "machine",
+                "product",
+                *self._fragments
+            ],
+            limit=1000,
+            joins=[
+                {
+                    "type": "molecule_molecule",
+                    "on": {
+                        "column1": "synthesis.molecule_id",
+                        "column2": "molecule_molecule.molecule_id"
+                    }
+                },
+                {
+                    "type": "lab",
+                    "on": {
+                        "column1": "synthesis.lab_id",
+                        "column2": "lab.lab_id"
+                    }
+                },
+                {
+                    "type": "machine",
+                    "on": {
+                        "column1": "synthesis.machine_id",
+                        "column2": "machine.machine_id"
+                    }
+                },
+                {
+                    "type": "product",
+                    "on": {
+                        "column1": "product.molecule_id",
+                        "column2": "molecule_molecule.molecule_id"
+                    }
+                },
+                *[
+                    {
+                        "type": frag,
+                        "on": {
+                            "column1": f"{frag}.molecule_id",
+                            "column2": f"molecule_molecule.{frag}"
+                        }
+                    }
+                    for frag in self._fragments
+                ]
+            ],
+            aliases=[
+                {
+                    "type": "molecule",
+                    "alias": "product"
+                },
+                *[
+                    {
+                        "type": "molecule",
+                        "alias": frag
+                    }
+                    for frag in self._fragments
+                ]
+            ],
+            filters={
+                "filters": [
+                    {
+                        "type": "lab.name",
+                        "op": "==",
+                        "value": lab
+                    },
+                    {
+                        "type": "synthesis.status",
+                        "op": "==",
+                        "value": status
+                    },
+                    {
+                        "type": "machine.name",
+                        "op": "==",
+                        "value": instrument
+                    }
+                ],
+                "op": "and"
+            }
+        )
+        if request.empty:
+            return None
+        else:
+            return request[
+                [
+                    "synthesis.synthesis_id",
+                    "synthesis.status",
+                    "synthesis.molecule_id",
+                    "lab.name",
+                    "machine.machine_id",
+                    "product.smiles",
+                    *[f"{frag}.{col}" for frag in self._fragments for col in ("hid", "smiles")]
+                ]
+            ]
+
+    @_run_with_connection.__get__(0)
+    def get_available_syntheses(self) -> Union[None, pd.DataFrame]:
+        """
+        Fetches the details about all syntheses set to a specific status (e.g. "available").
+
+        Returns:
+            pending_syntheses (Union[None, pd.DataFrame])
+        """
+        request = self._client.query_database(
+            types=[
+                "synthesis",
+                "molecule_molecule.molecule_id",
+                "product",
+                *self._fragments
+            ],
+            limit=1000,
+            joins=[
+                {
+                    "type": "molecule_molecule",
+                    "on": {
+                        "column1": "synthesis.molecule_id",
+                        "column2": "molecule_molecule.molecule_id"
+                    }
+                },
+                {
+                    "type": "product",
+                    "on": {
+                        "column1": "product.molecule_id",
+                        "column2": "molecule_molecule.molecule_id"
+                    }
+                },
+                *[
+                    {
+                        "type": frag,
+                        "on": {
+                            "column1": f"{frag}.molecule_id",
+                            "column2": f"molecule_molecule.{frag}"
+                        }
+                    }
+                    for frag in self._fragments
+                ]
+            ],
+            aliases=[
+                {
+                    "type": "molecule",
+                    "alias": "product"
+                },
+                *[
+                    {
+                        "type": "molecule",
+                        "alias": frag
+                    }
+                    for frag in self._fragments
+                ]
+            ],
+            filters={
+                "filters": [
+                    {
+                        "type": "synthesis.status",
+                        "op": "==",
+                        "value": "AVAILABLE"
+                    },
+                ],
+                "op": "and"
+            }
+        )
+
+        if request.empty:
+            return None
+        else:
+            return request[
+                [
+                    "synthesis.synthesis_id",
+                    "synthesis.status",
+                    "synthesis.molecule_id",
+                    "product.smiles",
+                    *[f"{frag}.{col}" for frag in self._fragments for col in ("hid", "smiles")]
+                ]
+            ]
+
+    @_run_with_connection.__get__(0)
+    def get_all_syntheses(self) -> Union[None, pd.DataFrame]:
+        """
+        ONLY FOR DEBUGGING --- THIS FUNCTION DOES NOT HAVE ANY USE IN REAL LIFE!
+        """
+        request = self._client.query_database(
+            types=[
+                "synthesis",
+                "molecule_molecule.molecule_id",
+                "product",
+                *self._fragments
+            ],
+            limit=1000,
+            joins=[
+                {
+                    "type": "molecule_molecule",
+                    "on": {
+                        "column1": "synthesis.molecule_id",
+                        "column2": "molecule_molecule.molecule_id"
+                    }
+                },
+                {
+                    "type": "product",
+                    "on": {
+                        "column1": "product.molecule_id",
+                        "column2": "molecule_molecule.molecule_id"
+                    }
+                },
+                *[
+                    {
+                        "type": frag,
+                        "on": {
+                            "column1": f"{frag}.molecule_id",
+                            "column2": f"molecule_molecule.{frag}"
+                        }
+                    }
+                    for frag in self._fragments
+                ]
+            ],
+            aliases=[
+                {
+                    "type": "molecule",
+                    "alias": "product"
+                },
+                *[
+                    {
+                        "type": "molecule",
+                        "alias": frag
+                    }
+                    for frag in self._fragments
+                ]
+            ]
+        )
+
+        if request.empty:
+            return None
+        else:
+            return request[
+                [
+                    "product.hid",
+                    "product.smiles",
+                    "product.optical_properties",
+                    *[f"{frag}.{col}" for frag in self._fragments for col in ("hid", "smiles")],
+                    "synthesis.synthesis_id",
+                    "synthesis.status",
+                    "synthesis.molecule_id",
+                ]
+            ]
+
+    @_run_with_connection.__get__(0)
+    def get_molecule(self, identifier: str, identifier_type: str = "hid") -> Union[None, pd.DataFrame]:
+        """
+        Queries the MOLAR for identifying a specific target_zone molecule.
+        Returns the corresponding MOLAR entry.
+
+        Parameters:
+            identifier (str): Identifier of the molecule
+            identifier_type (str): Which identifier to use ("molecule_id", "hid" (default), "smiles" or "CAS")
+
+        Returns:
+            target_mol (Union[None, pd.DataFrame]): Dataframe of the query result
+        """
+        target_mol = self._client.query_database(
+            types="molecule",
+            filters={
+                "type": f"molecule.{identifier_type}",
+                "op": "==",
+                "value": identifier
+            }
+        )
+
+        if target_mol.empty:
+            return None
+        else:
+            return target_mol
+
+    @_run_with_connection.__get__(0)
+    def get_all_fragments(self, fragment_type: str) -> Union[None, pd.DataFrame]:
+        """
+        Queries the MOLAR for identifying all molecules that belong to a certain molecule_type.
+        Returns the corresponding MOLAR entries.
+
+        Parameters:
+            fragment_type: Name of the molecule_type
+
+        Returns: Dataframe of the query result
+        """
+        request = self._client.query_database(
+            types="molecule",
+            joins={
+                "type": "molecule_type",
+                "on": {
+                    "column1": "molecule.molecule_type_id",
+                    "column2": "molecule_type.molecule_type_id"
+                }
+            },
+            filters={
+                "type": "molecule_type.name",
+                "op": "==",
+                "value": fragment_type
+            },
+            limit=1000
+        )
+
+        if request.empty:
+            return None
+        else:
+            return request
+
+    @_run_with_connection.__get__(0)
+    def get_available_fragments(self, fragment_type: str, lab: str) -> Union[None, pd.DataFrame]:
+        """
+        Complex query to get all availabe fragments of a certain fragment type in a certain lab.
+
+        Args:
+            fragment_type: Name of the fragment type to be queried (e.g. "fragment_a").
+            lab: Name of the lab where the fragment should be available.
+        """
+        request = self._client.query_database(
+            types=[
+                "molecule",
+                "molecule_type",
+                "lab_molecule",
+                "lab"
+            ],
+            limit=1000,
+            joins=[
+                {
+                    "type": "molecule_type",
+                    "on": {
+                        "column1": "molecule.molecule_type_id",
+                        "column2": "molecule_type.molecule_type_id"
+                    }
+                },
+                {
+                    "type": "lab_molecule",
+                    "on": {
+                        "column1": "molecule.molecule_id",
+                        "column2": "lab_molecule.molecule_id"
+                    }
+                },
+                {
+                    "type": "lab",
+                    "on": {
+                        "column1": "lab_molecule.lab_id",
+                        "column2": "lab.lab_id"
+                    }
+                }
+            ],
+            filters={
+                "filters": [
+                    {
+                        "type": "molecule_type.name",
+                        "op": "==",
+                        "value": fragment_type
+                    },
+                    {
+                        "type": "lab.name",
+                        "op": "==",
+                        "value": lab
+                    },
+                    {
+                        "type": "lab_molecule.available",
+                        "op": "==",
+                        "value": True
+                    }
+                ],
+                "op": "and"
+            }
+        )
+
+        if request.empty:
+            return None
+        else:
+            return request[[
+                "molecule.molecule_id",
+                "molecule.hid",
+                "molecule.smiles",
+                "molecule.commercially_available"
+            ]]
+
+    @_run_with_connection.__get__(0)
+    def _get_uuid(self, table: str, identifier: str, identifier_type: str) -> Union[str, None]:
+        """
+        Fetches the uuid of a lab/molecule/machine/molecule_type from the MOLAR.
+
+        Parameters:
+            table (str): Name of the table to get the uuid from.
+            identifier (str): Identifier of the respective entry.
+            identifier_type (str): Identifier type (name of the table column).
+
+        Returns:
+            uuid (str): UUID of the lab/molecule/machine/molecule_type
+        """
+        entry = self._client.query_database(
+            types=table,
+            filters={
+                "type": f"{table}.{identifier_type}",
+                "op": "==",
+                "value": identifier
+            }
+        )
+
+        if entry.empty:
+            return None
+        else:
+            return entry.at[0, f"{table}_id"]
+
+    @_run_with_connection.__get__(0)
+    def _get_synthesis_uuid_from_molecule(self, identifier: str, identifier_type: str = "hid") -> Union[str, None]:
+        """
+        Fetches the uuid of a synthesis from the corresponding molecule identifier.
+
+        Parameters:
+            identifier (str): Identifier of the molecule to get the uuid from.
+            identifier_type (str): Which identifier to use ("molecule_id", "hid" (default), "smiles")
+
+        Returns:
+            uuid (str): UUID of the synthesis
+        """
+        synthesis = self._client.query_database(
+            types=[
+                "synthesis",
+                "molecule"
+            ],
+            joins={
+                "type": "molecule",
+                "on": {
+                    "column1": "molecule.molecule_id",
+                    "column2": "synthesis.molecule_id"
+                }
+            },
+            filters={
+                "type": f"molecule.{identifier_type}",
+                "op": "==",
+                "value": identifier
+            }
+        )
+
+        if synthesis.empty:
+            return None
+        else:
+            return synthesis.at[0, "synthesis.synthesis_id"]
+
+    ##############################
+    # WRITE DATA TO THE DATABASE #
+    ##############################
+
+    @_run_with_connection.__get__(0)
+    def create_target_compound(self, fragments: Union[tuple, list], smiles: str, identifier_type: str = "hid") -> Tuple[str, str, str]:   # TODO: remove instrument and lab id
+        """
+        Creates all entries for the synthesis of a new target_zone compound in the MOLAR.
+            - creates the entries in the molecule, molecule_molecule, and synthesis table, linked via the molecule_id
+            - entries are linked to the fragments
+            - sets the synthesis status to "AVAILABLE"
+
+        Parameters:
+            fragments (tuple or list): Collection of all fragment identifiers (e.g. human id, MOLAR id, SMILES)
+            smiles (str): SMILES string of the
+            identifier_type (str): Type of identifier of the fragments
+
+        Returns:
+            mol (dict): Molar event source_zone of the molecule entry generation
+            mol_mol (dict): Molar event source_zone of the molecule_molecule entry generation
+            synthesis (dict): Molar event source_zone of the synthesis entry generation
+        """
+        # Get Fragment Details and Create the Target Molecule Identifier
+        fragment_details = {
+            fragment: self.get_molecule(fragment, identifier_type=identifier_type)
+            for fragment in fragments
+        }
+
+        mol_hid: str = "".join(frag_details.at[0, "hid"] for frag_details in fragment_details.values())
+
+        # Check if the Entry for the Target Molecule Exists, else Create it
+
+        mol_uuid = self._get_uuid("molecule", mol_hid, "hid")
+
+        if not mol_uuid:
+            mol = self._client.create_entry(
+                type="molecule",
+                data={
+                    "smiles": smiles,
+                    "molecule_type_id": self._get_uuid("molecule_type", "abc_molecule", "name"),
+                    "optical_properties": {},
+                    "commercially_available": False,
+                    "hid": "".join(frag_details.at[0, "hid"] for frag_details in fragment_details.values())
+                }
+            )
+            mol_uuid = mol["uuid"]
+
+        # Check if the Entry for the Target Molecule_Molecule Exists, else Create it
+
+        mol_mol_uuid = self._get_uuid("molecule_molecule", mol_uuid, "molecule_id")
+
+        if not mol_mol_uuid:
+            mol_mol = self._client.create_entry(
+                type="molecule_molecule",
+                data={
+                    "molecule_id": mol_uuid,
+                    **{
+                        frag: frag_details.at[0, "molecule_id"]
+                        for frag, frag_details in zip(self._fragments, fragment_details.values())
+                    }
+                }
+            )
+            mol_mol_uuid = mol_mol["uuid"]
+
+        # Create the Entry for the Target Synthesis
+
+        synthesis = self._client.create_entry(
+            type="synthesis",
+            data={
+                "molecule_id": mol_uuid,
+                "status": "AVAILABLE"
+            }
+        )
+
+        return mol_uuid, mol_mol_uuid, synthesis["uuid"]
+
+    @_run_with_connection.__get__(0)
+    def update_synthesis_status(self, identifier: str, status: str, identifier_type: str = "hid") -> None:
+        """
+        Updates the status of a synthesis run.
+
+        Parameters:
+            identifier (str): Identifier of the molecule
+            status (str): New status to be uploaded. P
+            identifier_type (str): Which identifier to use ("molecule_id", "hid" (default), "smiles")
+        """
+        assert status in self.status_possible
+
+        synthesis_id = self._get_synthesis_uuid_from_molecule(identifier, identifier_type)
+
+        self._client.update_entry(
+            uuid=synthesis_id,
+            type="synthesis",
+            data={"status": status}
+        )
+
+    @_run_with_connection.__get__(0)
+    def claim_synthesis(self, identifier: str, instrument: str, lab: str, status: str = "ACQUIRED", identifier_type: str = "hid"):
+        """
+        Assigns a synthesis run to a specific lab and instrument.
+
+        Parameters:
+            identifier (str): Identifier of the molecule
+            instrument (str): Name of the instrument to be included (currently: "The Machine", "ChemSpeed", "Chemputer")
+            lab (str): Name of the lab to be included (currently: "Toronto", "Illinois", "Vancouver", "Glasgow", if respective instrument is available)
+            status (str): New status to be uploaded.
+            identifier_type (str): Which identifier to use ("molecule_id", "hid" (default), "smiles")
+        """
+        assert status in self.status_possible
+
+        synthesis_id = self._get_synthesis_uuid_from_molecule(identifier, identifier_type)
+        lab_id = self._get_uuid("lab", lab, "name")
+        instrument_id = self._get_uuid("machine", instrument, "name")
+
+        self._client.update_entry(
+            uuid=synthesis_id,
+            type="synthesis",
+            data={"status": status,
+                  "lab_id": lab_id,
+                  "machine_id": instrument_id}
+        )
+
+    @_run_with_connection.__get__(0)
+    def update_optics_data(self, identifier: str, optics_data: dict, identifier_type: str = "hid") -> None:
+        """Uploads the optical characterization data after completion of a synthesis run.
+            - Checks for the uuid of the target_zone molecule in the molecule table (molecule.molecule_id).
+            - If the target_zone molecule is not available, it attempts to create this entry from the HID.
+            - Writes the characterization data to the entry in the molecule table (molecule.optical_properties).
+            - Updates the Synthesis status to "DONE" or "FAILED"
+
+        Parameters:
+            identifier (str): Identifier of the synthesis run.
+            optics_data (dict): Optical properties to be uploaded
+            identifier_type (str): Which identifier to use ("molecule_id", "hid" (default), "smiles")
+        """
+        target_mol = self.get_molecule(identifier, identifier_type)
+
+        if target_mol is not None:
+            target_uuid = target_mol.at[0, "molecule_id"]
+
+        elif identifier_type == "hid":  # ATTENTION: CURRENTLY SPECIAL FOR A0001B001C001 HID TYPE
+            try:
+                new_entry = self.create_target_compound(
+                    fragments=(identifier[0:4], identifier[4:8], identifier[8:12]),
+                    instrument_id="f158c26e-a94e-4994-9a95-de324aa1da23",  # ATTENTION: ASSIGNS ALL NEW SYNTHESES TO CHEMSPEED IN TORONTO
+                    lab_id="08cc75ca-8d1e-4ead-9b56-ad1b6ba83a41"
+                )
+
+                target_uuid = new_entry[0]["uuid"]
+
+            except (ValueError, KeyError, MolarBackendError):
+                raise KeyError(f"Compound {identifier} does not exist in MOLAR and entry could not be created.")
+
+        else:
+            raise KeyError(f"Compound {identifier} does not exist in MOLAR and entry could not be created from this identifier.")
+
+
+        if optics_data["validation_status"] is True:
+            target_status = "DONE"
+        else:
+            target_status = "FAILED"
+
+        self._client.update_entry(
+            uuid=target_uuid,
+            type="molecule",
+            data={
+                "optical_properties": optics_data,
+            }
+        )
+
+        self.update_synthesis_status(identifier, target_status, identifier_type)
+
+    @_run_with_connection.__get__(0)
+    def _send_file(self, file_path: Path, synthesis_uuid: str) -> None:
+        """
+        --- Method from Theo (only slight modifications) ---
+        Sends a file from a file location (given by file_path) to the MOLAR.
+        Links it to the synthesis given by synthesis_uuid.
+        Raises an Exception if anything went wrong during file upload (status code not 200).
+
+        Parameters:
+            file_path (Path): Path to the file to be uploaded
+            synthesis_uuid (str): UUID of the synthesis to be linked to
+        """
+        token = self._get_token()
+
+        out = requests.post(
+            "https://molar.cs.toronto.edu/organizer/v1/upload-experiment",
+            params={"synthesis_id": synthesis_uuid},
+            headers={"Authorization": f"Bearer {token}"},
+            files={
+                "file": (
+                    file_path.name,
+                    open(file_path, "rb"),
+                    magic.from_file(str(file_path), mime=True),
+                )
+            },
+        )
+        if out.status_code == 200:
+            print(f"Successfully uploaded {file_path}.")
+            return
+        raise MolarBackendError(out.status_code, f"Something went wrong: {out.text}")
+
+    @_run_with_connection.__get__(0)
+    def upload_hplc_data(self, data_archive: Path, identifier: str, identifier_type: str = "hid"):
+        """
+        Uploads an HPLC data archive to the MOLAR and links it to a synthesis:
+            - gets the synthesis uuid
+            - uploads the file to the MOLAR using self._send_file()
+
+        Parameters:
+            data_archive (Path): Path to the HPLC-MS data archive
+            identifier (str): Identifier of the target_zone compound to be synthesized
+            identifier_type (str): Which identifier to use ("molecule_id", "hid" (default), "smiles")
+        """
+        synthesis_uuid = self._get_synthesis_uuid_from_molecule(identifier, identifier_type)
+        if synthesis_uuid is None:
+            raise ValueError(f"The molecule entry corresponding to {identifier} in the MOLAR does not exist.")
+        self._send_file(data_archive, synthesis_uuid)
+
+    ####################################
+    # DELETE ENTRIES FROM THE DATABASE #
+    ####################################
+
+    def delete_entry(self, table: str, identifier: str, identifier_type: str = "hid") -> None:
+        """
+        Deletes an entry from the database.
+
+        Args:
+            table: Name of the table.
+            identifier: Identifier of the entry to be deleted.
+            identifier_type: Type of the identifier (column name in the target table).
+        """
+        uuid = self._get_uuid(table, identifier, identifier_type)
+
+        self._client.delete_entry(
+            type=table,
+            uuid=uuid
+        )
+
+    def delete_target_compound(self, identifier: str, identifier_type: str = "hid") -> None:
+        """
+        Deletes all entries related to a target compound (entries in the molecule, molecule_molecule, and synthesis
+        tables) from the database.
+
+        Args:
+            identifier: Identifier of the target molecule.
+            identifier_type: Type of the identifier (column name in the target table).
+        """
+        mol_uuid = self._get_uuid("molecule", identifier, identifier_type)
+        mol_mol_uuid = self._get_uuid("molecule_molecule", mol_uuid, "molecule_id")
+        synthesis_uuid = self._get_uuid("synthesis", mol_uuid, "molecule_id")
+
+        self.delete_entry("synthesis", synthesis_uuid, "synthesis_id")
+        self.delete_entry("molecule_molecule", mol_mol_uuid, "molecule_molecule_id")
+        self.delete_entry("molecule", mol_uuid, "molecule_id")
\ No newline at end of file
Index: recommendations/round_3/run_iteration.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"87d90574\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"%load_ext autoreload\\n\",\n    \"%autoreload 2\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"id\": \"7adfedfc\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"import os, sys\\n\",\n    \"import time\\n\",\n    \"import pickle\\n\",\n    \"\\n\",\n    \"import numpy as np\\n\",\n    \"import pandas as pd\\n\",\n    \"\\n\",\n    \"import rdkit\\n\",\n    \"import rdkit.Chem as chem\\n\",\n    \"import rdkit.Chem.AllChem as allchem\\n\",\n    \"\\n\",\n    \"from gryffin import Gryffin\\n\",\n    \"\\n\",\n    \"from MolarInterface import MolarInterface\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"07668d40\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%% md\\n\"\n    }\n   },\n   \"source\": [\n    \"## Make connection to the MolarDB\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"id\": \"d2796b63\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"db = MolarInterface(\\n\",\n    \"    db_name=\\\"madness_laser\\\",\\n\",\n    \"    fragments=(\\\"fragment_a\\\", \\\"fragment_b\\\", \\\"fragment_c\\\")\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"f67f5408\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%% md\\n\"\n    }\n   },\n   \"source\": [\n    \"## Retrieve the first set of molecules in the DB\\n\",\n    \"\\n\",\n    \"We use a filtered query to return all of the molecules for which we have tried to measure the optical properties. \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"id\": \"f79fb417\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"previous_syntheses = db.get_all_syntheses()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"id\": \"b75ae3f6\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"(236, 12)\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": \"    product.hid                                     product.smiles  \\\\\\n0  A001B046C003  Cc1cc(-c2cc(F)cc(-c3ccc(-n4c5ccccc5c5ccccc54)c...   \\n1  A041B058C100  Cn1cnc2ccc(-c3ccc(C=Cc4cnc(C=Cc5ccc(-c6ccc7ncn...   \\n2  A001B031C021  Cc1cc(-c2ccc(-c3cc(C)c(-c4ccc(-n5c6ccccc6c6ccc...   \\n3  A028B038C085  CCCCCCCCCCCCc1cc(-c2ccccc2-c2ccc(N3c4ccccc4CCc...   \\n4  A039B060C079  CCn1c2ccccc2c2cc(-c3ccccc3-c3ccccc3-c3ccc(C)c(...   \\n\\n  product.optical_properties fragment_a.hid  \\\\\\n0                         {}           A001   \\n1                         {}           A041   \\n2                         {}           A001   \\n3                         {}           A028   \\n4                         {}           A039   \\n\\n                                  fragment_a.smiles fragment_b.hid  \\\\\\n0   CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B046   \\n1               Cn1cnc2ccc(B3OC(C)(C)C(C)(C)O3)cc21           B058   \\n2   CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B031   \\n3  CC1(C)OB(c2ccc(N3c4ccccc4CCc4ccccc43)cc2)OC1(C)C           B038   \\n4        CCn1c2ccccc2c2cc(B3OC(C)(C)C(C)(C)O3)ccc21           B060   \\n\\n                                   fragment_b.smiles fragment_c.hid  \\\\\\n0  CC1(C)C(=O)O[B-]2(c3cc(F)cc(Br)c3)OC(=O)C(C)(C...           C003   \\n1  CC1(C)C(=O)O[B-]2(/C=C/c3ccc(Br)cc3)OC(=O)C(C)...           C100   \\n2  Cc1cc([B-]23OC(=O)C(C)(C)[N+]2(C)C(C)(C)C(=O)O...           C021   \\n3  CC1(C)C(=O)O[B-]2(c3ccccc3Br)OC(=O)C(C)(C)[N+]21C           C085   \\n4  CC1(C)C(=O)O[B-]2(c3ccccc3-c3ccccc3Br)OC(=O)C(...           C079   \\n\\n           fragment_c.smiles                synthesis.synthesis_id  \\\\\\n0         Cc1cc(Br)c(C)cc1Br  4f21e4b4-5259-42e3-ae43-f6a276e563f6   \\n1              Brc1cnc(Br)s1  63bea729-df1c-43ca-8078-90ba52716ffd   \\n2     FC(F)(F)c1cc(Br)ccc1Br  97b29bb5-16fb-4b5c-9fe8-ffdd6a869ebe   \\n3  CCCCCCCCCCCCc1cc(Br)sc1Br  9839e50f-d7dc-4f63-a682-5feb2f99579b   \\n4            Cc1ccc(Br)cc1Br  df641953-a3eb-4c88-9d04-a8b024e4a502   \\n\\n  synthesis.status                 synthesis.molecule_id  \\n0        AVAILABLE  ced41854-1953-4071-b48e-1dd1189f3a9e  \\n1        AVAILABLE  e9b6f686-e5d5-4a2e-a21d-e52cca5036dd  \\n2        AVAILABLE  50db756f-a682-4e30-b39c-e3af5f2b111d  \\n3        AVAILABLE  b8e0476d-00d2-45df-9f0b-5c9b2029d1a2  \\n4        AVAILABLE  5963ac30-5d0c-479b-a11c-86c95a56adc5  \",\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>product.hid</th>\\n      <th>product.smiles</th>\\n      <th>product.optical_properties</th>\\n      <th>fragment_a.hid</th>\\n      <th>fragment_a.smiles</th>\\n      <th>fragment_b.hid</th>\\n      <th>fragment_b.smiles</th>\\n      <th>fragment_c.hid</th>\\n      <th>fragment_c.smiles</th>\\n      <th>synthesis.synthesis_id</th>\\n      <th>synthesis.status</th>\\n      <th>synthesis.molecule_id</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>A001B046C003</td>\\n      <td>Cc1cc(-c2cc(F)cc(-c3ccc(-n4c5ccccc5c5ccccc54)c...</td>\\n      <td>{}</td>\\n      <td>A001</td>\\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\\n      <td>B046</td>\\n      <td>CC1(C)C(=O)O[B-]2(c3cc(F)cc(Br)c3)OC(=O)C(C)(C...</td>\\n      <td>C003</td>\\n      <td>Cc1cc(Br)c(C)cc1Br</td>\\n      <td>4f21e4b4-5259-42e3-ae43-f6a276e563f6</td>\\n      <td>AVAILABLE</td>\\n      <td>ced41854-1953-4071-b48e-1dd1189f3a9e</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>A041B058C100</td>\\n      <td>Cn1cnc2ccc(-c3ccc(C=Cc4cnc(C=Cc5ccc(-c6ccc7ncn...</td>\\n      <td>{}</td>\\n      <td>A041</td>\\n      <td>Cn1cnc2ccc(B3OC(C)(C)C(C)(C)O3)cc21</td>\\n      <td>B058</td>\\n      <td>CC1(C)C(=O)O[B-]2(/C=C/c3ccc(Br)cc3)OC(=O)C(C)...</td>\\n      <td>C100</td>\\n      <td>Brc1cnc(Br)s1</td>\\n      <td>63bea729-df1c-43ca-8078-90ba52716ffd</td>\\n      <td>AVAILABLE</td>\\n      <td>e9b6f686-e5d5-4a2e-a21d-e52cca5036dd</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>A001B031C021</td>\\n      <td>Cc1cc(-c2ccc(-c3cc(C)c(-c4ccc(-n5c6ccccc6c6ccc...</td>\\n      <td>{}</td>\\n      <td>A001</td>\\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\\n      <td>B031</td>\\n      <td>Cc1cc([B-]23OC(=O)C(C)(C)[N+]2(C)C(C)(C)C(=O)O...</td>\\n      <td>C021</td>\\n      <td>FC(F)(F)c1cc(Br)ccc1Br</td>\\n      <td>97b29bb5-16fb-4b5c-9fe8-ffdd6a869ebe</td>\\n      <td>AVAILABLE</td>\\n      <td>50db756f-a682-4e30-b39c-e3af5f2b111d</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>A028B038C085</td>\\n      <td>CCCCCCCCCCCCc1cc(-c2ccccc2-c2ccc(N3c4ccccc4CCc...</td>\\n      <td>{}</td>\\n      <td>A028</td>\\n      <td>CC1(C)OB(c2ccc(N3c4ccccc4CCc4ccccc43)cc2)OC1(C)C</td>\\n      <td>B038</td>\\n      <td>CC1(C)C(=O)O[B-]2(c3ccccc3Br)OC(=O)C(C)(C)[N+]21C</td>\\n      <td>C085</td>\\n      <td>CCCCCCCCCCCCc1cc(Br)sc1Br</td>\\n      <td>9839e50f-d7dc-4f63-a682-5feb2f99579b</td>\\n      <td>AVAILABLE</td>\\n      <td>b8e0476d-00d2-45df-9f0b-5c9b2029d1a2</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>A039B060C079</td>\\n      <td>CCn1c2ccccc2c2cc(-c3ccccc3-c3ccccc3-c3ccc(C)c(...</td>\\n      <td>{}</td>\\n      <td>A039</td>\\n      <td>CCn1c2ccccc2c2cc(B3OC(C)(C)C(C)(C)O3)ccc21</td>\\n      <td>B060</td>\\n      <td>CC1(C)C(=O)O[B-]2(c3ccccc3-c3ccccc3Br)OC(=O)C(...</td>\\n      <td>C079</td>\\n      <td>Cc1ccc(Br)cc1Br</td>\\n      <td>df641953-a3eb-4c88-9d04-a8b024e4a502</td>\\n      <td>AVAILABLE</td>\\n      <td>5963ac30-5d0c-479b-a11c-86c95a56adc5</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"print(previous_syntheses.shape)\\n\",\n    \"previous_syntheses.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"id\": \"05f806f9\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"NUM IN PROGRESS :  13\\n\",\n      \"NUM FINISHED :  188\\n\",\n      \"PERCENT DONE 0.115\\n\"\n     ]\n    },\n    {\n     \"data\": {\n      \"text/plain\": \"      product.hid                                     product.smiles  \\\\\\n13           None  CCCCCCN1c2ccc(-c3ccc(-c4ccc5c(c4)c4ccccc4n5CC)...   \\n14           None  CN(C)c1ccc(-c2ccc(-c3csc(C(=O)O)c3-c3ccc(-c4cc...   \\n136          None  c1ccc(-c2nc3ccccc3n2-c2ccc(-c3cncc(-c4cc(-c5cn...   \\n139          None  CCCCCCN1c2ccc(-c3ccc(-c4ccc5c(ccn5C)c4)s3)cc2S...   \\n150  A001B012C005  CC1(C)c2cc(-c3cc(F)cc(-c4ccc(-n5c6ccccc6c6cccc...   \\n162  A015B001C028  CN(C)c1ccc(-c2ccc(C=Cc3cc(F)c(C=Cc4ccc(-c5ccc(...   \\n190  A012B003C158  CCn1c2ccccc2c2cc(C=Cc3cc(C(=O)OC)c(C=Cc4ccc5c(...   \\n191  A015B002C031  CN(C)c1ccc(-c2ccsc2-c2ccc(-c3sccc3-c3ccc(N(C)C...   \\n192  A016B004C074  Cc1cc(-c2cccnc2-c2ccc3ncn(C)c3c2)cc(-c2cccnc2-...   \\n205  A012B001C003  CCn1c2ccccc2c2cc(-c3ccc(C=Cc4cc(C)c(C=Cc5ccc(-...   \\n206  A001B020C005  CC1(C)c2cc(-c3c(F)cccc3-c3ccc(-n4c5ccccc5c5ccc...   \\n207  A001B020C003  Cc1cc(-c2c(F)cccc2-c2ccc(-n3c4ccccc4c4ccccc43)...   \\n225  A015B028C158  COC(=O)c1cc(-c2cc(-c3ccc(N(C)C)c4ccccc34)no2)o...   \\n\\n                            product.optical_properties fragment_a.hid  \\\\\\n13                                                  {}           A012   \\n14                                                  {}           A015   \\n136  {'MS': {'data': [[0, 100.0687, 994.79614257812...           A013   \\n139  {'MS': {'data': [[0, 100.076, 2040.015625], [1...           A017   \\n150                                                 {}           A001   \\n162                                                 {}           A015   \\n190                                                 {}           A012   \\n191                                                 {}           A015   \\n192                                                 {}           A016   \\n205                                                 {}           A012   \\n206                                                 {}           A001   \\n207                                                 {}           A001   \\n225                                                 {}           A015   \\n\\n                                   fragment_a.smiles fragment_b.hid  \\\\\\n13                      CCn1c2ccccc2c2cc(B(O)O)ccc21           B025   \\n14          CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12           B025   \\n136         OB(O)c1ccc(-n2c(-c3ccccc3)nc3ccccc32)cc1           B005   \\n139                            Cn1ccc2cc(B(O)O)ccc21           B025   \\n150  CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B012   \\n162         CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12           B001   \\n190                     CCn1c2ccccc2c2cc(B(O)O)ccc21           B003   \\n191         CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12           B002   \\n192                            Cn1cnc2ccc(B(O)O)cc21           B004   \\n205                     CCn1c2ccccc2c2cc(B(O)O)ccc21           B001   \\n206  CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B020   \\n207  CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B020   \\n225         CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12           B028   \\n\\n                                  fragment_b.smiles fragment_c.hid  \\\\\\n13         C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2           C130   \\n14         C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2           C116   \\n136       C[N+]12CC(=O)O[B-]1(c1cncc(Br)c1)OC(=O)C2           C154   \\n139        C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2           C130   \\n150    C[N+]12CC(=O)O[B-]1(c1cc(F)cc(Br)c1)OC(=O)C2           C005   \\n162  C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2           C028   \\n190            C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2           C158   \\n191          C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C031   \\n192         C[N+]12CC(=O)O[B-]1(c1cccnc1Br)OC(=O)C2           C074   \\n205  C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2           C003   \\n206      C[N+]12CC(=O)O[B-]1(c1c(F)cccc1Br)OC(=O)C2           C005   \\n207      C[N+]12CC(=O)O[B-]1(c1c(F)cccc1Br)OC(=O)C2           C003   \\n225        C[N+]12CC(=O)O[B-]1(c1cc(Br)no1)OC(=O)C2           C158   \\n\\n                      fragment_c.smiles                synthesis.synthesis_id  \\\\\\n13   CCCCCCN1c2ccc(Br)cc2Sc2cc(Br)ccc21  8cf4e82b-6075-460d-a2ad-cb492f4c4b93   \\n14                  O=C(O)c1scc(Br)c1Br  43283ee2-6110-4460-aa57-08cedd716cbd   \\n136    Brc1cc(Br)cc(N2CCC3(CC2)OCCO3)c1  c74040cf-8e5f-4f3f-8e06-e77363663672   \\n139  CCCCCCN1c2ccc(Br)cc2Sc2cc(Br)ccc21  649fe653-970e-4b7e-9571-c944032aef39   \\n150    CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21  5e6ce632-3571-46ba-b25c-718274b3dd05   \\n162                  Fc1cc(Br)c(F)cc1Br  936d4d55-a669-48ed-a5ec-c41300c7ff64   \\n190                COC(=O)c1cc(Br)oc1Br  05f4ee39-f0b8-4b5f-969e-4fcdb07da878   \\n191                      Brc1ccc(Br)nn1  fecae425-531a-478e-ab03-9f7ff26cca24   \\n192                  Cc1cc(Br)cc(Br)c1O  c6191dcf-5f49-4a66-836b-b8474a14c269   \\n205                  Cc1cc(Br)c(C)cc1Br  7809efa1-062f-4b61-a410-083cf01a29ad   \\n206    CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21  1d211a94-d351-47e0-b976-87aadb957eb6   \\n207                  Cc1cc(Br)c(C)cc1Br  048f2bd1-8c80-4069-86b6-26311ae4f1ca   \\n225                COC(=O)c1cc(Br)oc1Br  becaa60f-c923-4ac0-a4e3-0c31e333a12a   \\n\\n    synthesis.status                 synthesis.molecule_id  \\n13        PROCESSING  b33b1cc9-81d8-4833-803f-466411581a4d  \\n14          RECEIVED  322b8304-39b5-49bc-a307-99719f0d5911  \\n136      SYNTHESIZED  036ef848-5792-4501-b904-63301e6f1027  \\n139         RECEIVED  416db1b2-15d6-4a2b-b2d2-a0e688f0dce4  \\n150         ACQUIRED  c08b6d18-3a1d-4b8a-91e8-ec7fa281cf8e  \\n162         ACQUIRED  f336bff6-b429-4d4b-9202-af690e1eacc1  \\n190         ACQUIRED  d77e729b-2284-4282-b2c4-78e55928364b  \\n191         ACQUIRED  5a14f557-6ba2-4afe-b48a-4a56040822f4  \\n192         ACQUIRED  57427931-f0bc-4b77-98e8-1959255f7c4c  \\n205         ACQUIRED  8ac8aa07-c5cd-4334-9c63-983b5a4a50d1  \\n206         ACQUIRED  f02fc641-b6fc-4e17-bf8d-7a4a405b9035  \\n207         ACQUIRED  d19b4245-7ed6-4d41-8bb9-eaa29a3e5e3e  \\n225         ACQUIRED  bbec210f-bf95-4f0c-8cb6-323d88c1c52d  \",\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>product.hid</th>\\n      <th>product.smiles</th>\\n      <th>product.optical_properties</th>\\n      <th>fragment_a.hid</th>\\n      <th>fragment_a.smiles</th>\\n      <th>fragment_b.hid</th>\\n      <th>fragment_b.smiles</th>\\n      <th>fragment_c.hid</th>\\n      <th>fragment_c.smiles</th>\\n      <th>synthesis.synthesis_id</th>\\n      <th>synthesis.status</th>\\n      <th>synthesis.molecule_id</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>13</th>\\n      <td>None</td>\\n      <td>CCCCCCN1c2ccc(-c3ccc(-c4ccc5c(c4)c4ccccc4n5CC)...</td>\\n      <td>{}</td>\\n      <td>A012</td>\\n      <td>CCn1c2ccccc2c2cc(B(O)O)ccc21</td>\\n      <td>B025</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2</td>\\n      <td>C130</td>\\n      <td>CCCCCCN1c2ccc(Br)cc2Sc2cc(Br)ccc21</td>\\n      <td>8cf4e82b-6075-460d-a2ad-cb492f4c4b93</td>\\n      <td>PROCESSING</td>\\n      <td>b33b1cc9-81d8-4833-803f-466411581a4d</td>\\n    </tr>\\n    <tr>\\n      <th>14</th>\\n      <td>None</td>\\n      <td>CN(C)c1ccc(-c2ccc(-c3csc(C(=O)O)c3-c3ccc(-c4cc...</td>\\n      <td>{}</td>\\n      <td>A015</td>\\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12</td>\\n      <td>B025</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2</td>\\n      <td>C116</td>\\n      <td>O=C(O)c1scc(Br)c1Br</td>\\n      <td>43283ee2-6110-4460-aa57-08cedd716cbd</td>\\n      <td>RECEIVED</td>\\n      <td>322b8304-39b5-49bc-a307-99719f0d5911</td>\\n    </tr>\\n    <tr>\\n      <th>136</th>\\n      <td>None</td>\\n      <td>c1ccc(-c2nc3ccccc3n2-c2ccc(-c3cncc(-c4cc(-c5cn...</td>\\n      <td>{'MS': {'data': [[0, 100.0687, 994.79614257812...</td>\\n      <td>A013</td>\\n      <td>OB(O)c1ccc(-n2c(-c3ccccc3)nc3ccccc32)cc1</td>\\n      <td>B005</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1cncc(Br)c1)OC(=O)C2</td>\\n      <td>C154</td>\\n      <td>Brc1cc(Br)cc(N2CCC3(CC2)OCCO3)c1</td>\\n      <td>c74040cf-8e5f-4f3f-8e06-e77363663672</td>\\n      <td>SYNTHESIZED</td>\\n      <td>036ef848-5792-4501-b904-63301e6f1027</td>\\n    </tr>\\n    <tr>\\n      <th>139</th>\\n      <td>None</td>\\n      <td>CCCCCCN1c2ccc(-c3ccc(-c4ccc5c(ccn5C)c4)s3)cc2S...</td>\\n      <td>{'MS': {'data': [[0, 100.076, 2040.015625], [1...</td>\\n      <td>A017</td>\\n      <td>Cn1ccc2cc(B(O)O)ccc21</td>\\n      <td>B025</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2</td>\\n      <td>C130</td>\\n      <td>CCCCCCN1c2ccc(Br)cc2Sc2cc(Br)ccc21</td>\\n      <td>649fe653-970e-4b7e-9571-c944032aef39</td>\\n      <td>RECEIVED</td>\\n      <td>416db1b2-15d6-4a2b-b2d2-a0e688f0dce4</td>\\n    </tr>\\n    <tr>\\n      <th>150</th>\\n      <td>A001B012C005</td>\\n      <td>CC1(C)c2cc(-c3cc(F)cc(-c4ccc(-n5c6ccccc6c6cccc...</td>\\n      <td>{}</td>\\n      <td>A001</td>\\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\\n      <td>B012</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1cc(F)cc(Br)c1)OC(=O)C2</td>\\n      <td>C005</td>\\n      <td>CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21</td>\\n      <td>5e6ce632-3571-46ba-b25c-718274b3dd05</td>\\n      <td>ACQUIRED</td>\\n      <td>c08b6d18-3a1d-4b8a-91e8-ec7fa281cf8e</td>\\n    </tr>\\n    <tr>\\n      <th>162</th>\\n      <td>A015B001C028</td>\\n      <td>CN(C)c1ccc(-c2ccc(C=Cc3cc(F)c(C=Cc4ccc(-c5ccc(...</td>\\n      <td>{}</td>\\n      <td>A015</td>\\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12</td>\\n      <td>B001</td>\\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2</td>\\n      <td>C028</td>\\n      <td>Fc1cc(Br)c(F)cc1Br</td>\\n      <td>936d4d55-a669-48ed-a5ec-c41300c7ff64</td>\\n      <td>ACQUIRED</td>\\n      <td>f336bff6-b429-4d4b-9202-af690e1eacc1</td>\\n    </tr>\\n    <tr>\\n      <th>190</th>\\n      <td>A012B003C158</td>\\n      <td>CCn1c2ccccc2c2cc(C=Cc3cc(C(=O)OC)c(C=Cc4ccc5c(...</td>\\n      <td>{}</td>\\n      <td>A012</td>\\n      <td>CCn1c2ccccc2c2cc(B(O)O)ccc21</td>\\n      <td>B003</td>\\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2</td>\\n      <td>C158</td>\\n      <td>COC(=O)c1cc(Br)oc1Br</td>\\n      <td>05f4ee39-f0b8-4b5f-969e-4fcdb07da878</td>\\n      <td>ACQUIRED</td>\\n      <td>d77e729b-2284-4282-b2c4-78e55928364b</td>\\n    </tr>\\n    <tr>\\n      <th>191</th>\\n      <td>A015B002C031</td>\\n      <td>CN(C)c1ccc(-c2ccsc2-c2ccc(-c3sccc3-c3ccc(N(C)C...</td>\\n      <td>{}</td>\\n      <td>A015</td>\\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12</td>\\n      <td>B002</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\\n      <td>C031</td>\\n      <td>Brc1ccc(Br)nn1</td>\\n      <td>fecae425-531a-478e-ab03-9f7ff26cca24</td>\\n      <td>ACQUIRED</td>\\n      <td>5a14f557-6ba2-4afe-b48a-4a56040822f4</td>\\n    </tr>\\n    <tr>\\n      <th>192</th>\\n      <td>A016B004C074</td>\\n      <td>Cc1cc(-c2cccnc2-c2ccc3ncn(C)c3c2)cc(-c2cccnc2-...</td>\\n      <td>{}</td>\\n      <td>A016</td>\\n      <td>Cn1cnc2ccc(B(O)O)cc21</td>\\n      <td>B004</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1cccnc1Br)OC(=O)C2</td>\\n      <td>C074</td>\\n      <td>Cc1cc(Br)cc(Br)c1O</td>\\n      <td>c6191dcf-5f49-4a66-836b-b8474a14c269</td>\\n      <td>ACQUIRED</td>\\n      <td>57427931-f0bc-4b77-98e8-1959255f7c4c</td>\\n    </tr>\\n    <tr>\\n      <th>205</th>\\n      <td>A012B001C003</td>\\n      <td>CCn1c2ccccc2c2cc(-c3ccc(C=Cc4cc(C)c(C=Cc5ccc(-...</td>\\n      <td>{}</td>\\n      <td>A012</td>\\n      <td>CCn1c2ccccc2c2cc(B(O)O)ccc21</td>\\n      <td>B001</td>\\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2</td>\\n      <td>C003</td>\\n      <td>Cc1cc(Br)c(C)cc1Br</td>\\n      <td>7809efa1-062f-4b61-a410-083cf01a29ad</td>\\n      <td>ACQUIRED</td>\\n      <td>8ac8aa07-c5cd-4334-9c63-983b5a4a50d1</td>\\n    </tr>\\n    <tr>\\n      <th>206</th>\\n      <td>A001B020C005</td>\\n      <td>CC1(C)c2cc(-c3c(F)cccc3-c3ccc(-n4c5ccccc5c5ccc...</td>\\n      <td>{}</td>\\n      <td>A001</td>\\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\\n      <td>B020</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1c(F)cccc1Br)OC(=O)C2</td>\\n      <td>C005</td>\\n      <td>CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21</td>\\n      <td>1d211a94-d351-47e0-b976-87aadb957eb6</td>\\n      <td>ACQUIRED</td>\\n      <td>f02fc641-b6fc-4e17-bf8d-7a4a405b9035</td>\\n    </tr>\\n    <tr>\\n      <th>207</th>\\n      <td>A001B020C003</td>\\n      <td>Cc1cc(-c2c(F)cccc2-c2ccc(-n3c4ccccc4c4ccccc43)...</td>\\n      <td>{}</td>\\n      <td>A001</td>\\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\\n      <td>B020</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1c(F)cccc1Br)OC(=O)C2</td>\\n      <td>C003</td>\\n      <td>Cc1cc(Br)c(C)cc1Br</td>\\n      <td>048f2bd1-8c80-4069-86b6-26311ae4f1ca</td>\\n      <td>ACQUIRED</td>\\n      <td>d19b4245-7ed6-4d41-8bb9-eaa29a3e5e3e</td>\\n    </tr>\\n    <tr>\\n      <th>225</th>\\n      <td>A015B028C158</td>\\n      <td>COC(=O)c1cc(-c2cc(-c3ccc(N(C)C)c4ccccc34)no2)o...</td>\\n      <td>{}</td>\\n      <td>A015</td>\\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12</td>\\n      <td>B028</td>\\n      <td>C[N+]12CC(=O)O[B-]1(c1cc(Br)no1)OC(=O)C2</td>\\n      <td>C158</td>\\n      <td>COC(=O)c1cc(Br)oc1Br</td>\\n      <td>becaa60f-c923-4ac0-a4e3-0c31e333a12a</td>\\n      <td>ACQUIRED</td>\\n      <td>bbec210f-bf95-4f0c-8cb6-323d88c1c52d</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# get the sub dataframe of all molecules that are either SHIPPED OR IN PROCESSING\\n\",\n    \"# these will be constrained in the Gryffin acquisition\\n\",\n    \"df_proc = previous_syntheses[previous_syntheses['synthesis.status'].isin([\\\"ACQUIRED\\\", \\\"PROCESSING\\\", \\\"SYNTHESIZED\\\", \\\"SHIPPED\\\", \\\"RECEIVED\\\"])]\\n\",\n    \"print('NUM IN PROGRESS : ', df_proc.shape[0])\\n\",\n    \"\\n\",\n    \"# get all the entries for which the status is DONE\\n\",\n    \"df_done = previous_syntheses[previous_syntheses['synthesis.status'].isin(['DONE', 'FAILED'])]\\n\",\n    \"print('NUM FINISHED : ', df_done.shape[0])\\n\",\n    \"\\n\",\n    \"print(f'PERCENT DONE {(df_done.shape[0] / (33*30*165) *100):.3f}')  # TODO: Make space calculaiton automatic from DB?\\n\",\n    \"\\n\",\n    \"df_proc\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"id\": \"87857491\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# get the fragment details for the fragments\\n\",\n    \"\\n\",\n    \"def make_gryffin_observations(df_done):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    prepare typical list of dictionary-style observations for Gryffin. This function\\n\",\n    \"    considers all failed experiments as nan-valued objectives. We do not consider the cause\\n\",\n    \"    for failure here (future improvement). This function is quite slow with all the calls to \\n\",\n    \"    the db about the fragments - make more efficient\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    # prepare observation list for Gryffin\\n\",\n    \"    observations = []\\n\",\n    \"\\n\",\n    \"    for _, row in df_done.iterrows():\\n\",\n    \"        row = row.to_dict()\\n\",\n    \"\\n\",\n    \"        if row[\\\"synthesis.status\\\"]=='DONE':\\n\",\n    \"            try:\\n\",\n    \"                gain_cross_section = row[\\\"product.optical_properties\\\"][\\\"gain_cross_section\\\"]\\n\",\n    \"            except KeyError:\\n\",\n    \"                print(f\\\"Target property could not be found for {row['hid']}\\\")\\n\",\n    \"\\n\",\n    \"        elif row['synthesis.status']=='FAILED':\\n\",\n    \"            # failed experiment, pass value to gryffin with nan objective value\\n\",\n    \"            gain_cross_section = np.nan\\n\",\n    \"\\n\",\n    \"        else:\\n\",\n    \"            raise NotImplementedError\\n\",\n    \"\\n\",\n    \"        observations.append(\\n\",\n    \"            {\\n\",\n    \"                'fragment': row[\\\"fragment_a.hid\\\"],\\n\",\n    \"                'fragment_b': row[\\\"fragment_b.hid\\\"],\\n\",\n    \"                'fragment_c': row[\\\"fragment_c.hid\\\"],\\n\",\n    \"                'obj': gain_cross_section\\n\",\n    \"            }\\n\",\n    \"        )\\n\",\n    \"        \\n\",\n    \"    return observations\\n\",\n    \"\\n\",\n    \"def known_constraints(param):\\n\",\n    \"    '''\\n\",\n    \"    known constraint that the suggested molecule must not be either shipping or\\n\",\n    \"    in progress. Avoids redundant suggestions\\n\",\n    \"    '''\\n\",\n    \"    # check if the param is within the known molecules\\n\",\n    \"    query_hid = ''.join([param['fragment_a'], param['fragment_b'], param['fragment_c']])\\n\",\n    \"    crit1 = query_hid not in proc_hids\\n\",\n    \"    \\n\",\n    \"    # check to see if the sample can be made in at least one single location\\n\",\n    \"    crit2 = False\\n\",\n    \"    # TODO: this in only for the first batch, constrain to Toronto ONLY!\\n\",\n    \"    for lab_frags in [toronto_frags, uiuc_frags]:\\n\",\n    \"        if (\\n\",\n    \"            (param['fragment_a'] in lab_frags['fragment_a']) & (param['fragment_b'] in lab_frags['fragment_b']) & (param['fragment_c'] in lab_frags['fragment_c'])):\\n\",\n    \"            crit2=True\\n\",\n    \"            \\n\",\n    \"    return crit1 & crit2\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"id\": \"58c31a09\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"[None,\\n None,\\n None,\\n None,\\n 'A001B012C005',\\n 'A015B001C028',\\n 'A012B003C158',\\n 'A015B002C031',\\n 'A016B004C074',\\n 'A012B001C003',\\n 'A001B020C005',\\n 'A001B020C003',\\n 'A015B028C158']\"\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"\\n\",\n    \"# get hids of molecules in process\\n\",\n    \"proc_hids = df_proc[\\\"product.hid\\\"].tolist()\\n\",\n    \"proc_hids\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"id\": \"de320377\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"[{'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C001', 'obj': 1.869e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C002', 'obj': 1.968e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C003', 'obj': 2.309e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C004', 'obj': 6.72e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B003',\\n  'frag_c': 'C005',\\n  'obj': 2.6859999999999997e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C006', 'obj': 1.19e-17},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C008', 'obj': 1.89e-17},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C011', 'obj': 2.442e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C015', 'obj': 2.63e-17},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C017', 'obj': 1.212e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C018', 'obj': 1.649e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B003',\\n  'frag_c': 'C019',\\n  'obj': 9.330000000000001e-17},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C021', 'obj': 1.421e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B003',\\n  'frag_c': 'C024',\\n  'obj': 9.619999999999999e-17},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C028', 'obj': 1.462e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B003',\\n  'frag_c': 'C030',\\n  'obj': 1.2490000000000002e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C033', 'obj': 1.5e-18},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C032', 'obj': 1.177e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C034', 'obj': 2.13e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B003',\\n  'frag_c': 'C037',\\n  'obj': 5.739999999999999e-17},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C039', 'obj': 6.89e-17},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C040', 'obj': 6.57e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C001',\\n  'obj': 1.8870226199561358e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C004',\\n  'obj': 9.538077329332945e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C002',\\n  'obj': 2.839195275716423e-16},\\n {'frag_a': 'A001', 'frag_b': 'B024', 'frag_c': 'C042', 'obj': nan},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C007', 'obj': 2.669e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C010', 'obj': 1.925e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B003',\\n  'frag_c': 'C012',\\n  'obj': 1.0249999999999999e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C013', 'obj': 6.35e-17},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C020', 'obj': 2.021e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B003',\\n  'frag_c': 'C022',\\n  'obj': 1.0949999999999999e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B003',\\n  'frag_c': 'C023',\\n  'obj': 1.0429999999999999e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C027', 'obj': 1.159e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C029', 'obj': 2.108e-16},\\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C035', 'obj': 2.98e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C002',\\n  'obj': 7.799349032872396e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C003',\\n  'obj': 1.1411368497993406e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C001',\\n  'obj': 1.6663578688743284e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C003',\\n  'obj': 3.1948201629442367e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C004',\\n  'obj': 4.7901330144404335e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C005',\\n  'obj': 3.135808244483309e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C006',\\n  'obj': 1.689465788881972e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C008',\\n  'obj': 3.0358494982642504e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C010',\\n  'obj': 8.019337116721302e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C007',\\n  'obj': 1.833494300540071e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C007',\\n  'obj': 1.764808735613602e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C009',\\n  'obj': 8.782873926807519e-17},\\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C005', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C006',\\n  'obj': 1.5796210254473297e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C008',\\n  'obj': 2.564931620759565e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C009',\\n  'obj': 2.783403255397691e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C010',\\n  'obj': 1.4350151858010136e-16},\\n {'frag_a': 'A001', 'frag_b': 'B024', 'frag_c': 'C012', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C020',\\n  'obj': 2.1126617779616634e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C013',\\n  'obj': 5.4898487710362706e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C014',\\n  'obj': 8.27039807268337e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C016',\\n  'obj': 5.020111342447057e-18},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C017',\\n  'obj': 3.389972606091482e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C015',\\n  'obj': 6.101046643898326e-17},\\n {'frag_a': 'A001', 'frag_b': 'B024', 'frag_c': 'C013', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C012',\\n  'obj': 1.0391874034650129e-16},\\n {'frag_a': 'A017', 'frag_b': 'B012', 'frag_c': 'C014', 'obj': nan},\\n {'frag_a': 'A012',\\n  'frag_b': 'B006',\\n  'frag_c': 'C017',\\n  'obj': 7.830060269642066e-17},\\n {'frag_a': 'A012',\\n  'frag_b': 'B025',\\n  'frag_c': 'C007',\\n  'obj': 6.0148947648980065e-18},\\n {'frag_a': 'A014',\\n  'frag_b': 'B021',\\n  'frag_c': 'C026',\\n  'obj': 4.3830299289320585e-18},\\n {'frag_a': 'A014', 'frag_b': 'B017', 'frag_c': 'C027', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C015',\\n  'obj': 9.826850946704687e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C016',\\n  'obj': 1.545974068292758e-17},\\n {'frag_a': 'A015', 'frag_b': 'B016', 'frag_c': 'C020', 'obj': nan},\\n {'frag_a': 'A017', 'frag_b': 'B016', 'frag_c': 'C034', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C018',\\n  'obj': 1.2738719012641579e-17},\\n {'frag_a': 'A004', 'frag_b': 'B026', 'frag_c': 'C013', 'obj': nan},\\n {'frag_a': 'A016', 'frag_b': 'B011', 'frag_c': 'C032', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C017',\\n  'obj': 6.08174462298923e-18},\\n {'frag_a': 'A016', 'frag_b': 'B016', 'frag_c': 'C030', 'obj': nan},\\n {'frag_a': 'A014', 'frag_b': 'B017', 'frag_c': 'C004', 'obj': nan},\\n {'frag_a': 'A014', 'frag_b': 'B021', 'frag_c': 'C014', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C019',\\n  'obj': 2.273971941204006e-17},\\n {'frag_a': 'A014',\\n  'frag_b': 'B014',\\n  'frag_c': 'C027',\\n  'obj': 3.694213515548072e-17},\\n {'frag_a': 'A014', 'frag_b': 'B013', 'frag_c': 'C017', 'obj': nan},\\n {'frag_a': 'A015',\\n  'frag_b': 'B026',\\n  'frag_c': 'C039',\\n  'obj': 3.78925555720498e-18},\\n {'frag_a': 'A017',\\n  'frag_b': 'B024',\\n  'frag_c': 'C027',\\n  'obj': 1.0246242686484186e-16},\\n {'frag_a': 'A014',\\n  'frag_b': 'B024',\\n  'frag_c': 'C034',\\n  'obj': 5.261111543826998e-18},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C021',\\n  'obj': 5.774149693561629e-17},\\n {'frag_a': 'A014', 'frag_b': 'B014', 'frag_c': 'C022', 'obj': nan},\\n {'frag_a': 'A014',\\n  'frag_b': 'B025',\\n  'frag_c': 'C027',\\n  'obj': 3.7577682225114775e-18},\\n {'frag_a': 'A012',\\n  'frag_b': 'B014',\\n  'frag_c': 'C007',\\n  'obj': 1.18646011743689e-16},\\n {'frag_a': 'A002',\\n  'frag_b': 'B021',\\n  'frag_c': 'C039',\\n  'obj': 4.237611907237047e-17},\\n {'frag_a': 'A010', 'frag_b': 'B026', 'frag_c': 'C032', 'obj': nan},\\n {'frag_a': 'A002', 'frag_b': 'B021', 'frag_c': 'C004', 'obj': nan},\\n {'frag_a': 'A016', 'frag_b': 'B022', 'frag_c': 'C043', 'obj': nan},\\n {'frag_a': 'A014', 'frag_b': 'B016', 'frag_c': 'C042', 'obj': nan},\\n {'frag_a': 'A010', 'frag_b': 'B011', 'frag_c': 'C004', 'obj': nan},\\n {'frag_a': 'A014', 'frag_b': 'B017', 'frag_c': 'C026', 'obj': nan},\\n {'frag_a': 'A017', 'frag_b': 'B017', 'frag_c': 'C027', 'obj': nan},\\n {'frag_a': 'A002',\\n  'frag_b': 'B026',\\n  'frag_c': 'C013',\\n  'obj': 8.359460322246241e-17},\\n {'frag_a': 'A014', 'frag_b': 'B016', 'frag_c': 'C011', 'obj': nan},\\n {'frag_a': 'A002', 'frag_b': 'B011', 'frag_c': 'C039', 'obj': nan},\\n {'frag_a': 'A014',\\n  'frag_b': 'B012',\\n  'frag_c': 'C004',\\n  'obj': 4.651911176165383e-17},\\n {'frag_a': 'A016',\\n  'frag_b': 'B024',\\n  'frag_c': 'C032',\\n  'obj': 6.738964119838765e-18},\\n {'frag_a': 'A014',\\n  'frag_b': 'B006',\\n  'frag_c': 'C005',\\n  'obj': 6.679155177965171e-17},\\n {'frag_a': 'A016', 'frag_b': 'B026', 'frag_c': 'C017', 'obj': nan},\\n {'frag_a': 'A017',\\n  'frag_b': 'B024',\\n  'frag_c': 'C034',\\n  'obj': 1.4131711981022327e-17},\\n {'frag_a': 'A015', 'frag_b': 'B010', 'frag_c': 'C014', 'obj': nan},\\n {'frag_a': 'A014', 'frag_b': 'B013', 'frag_c': 'C005', 'obj': nan},\\n {'frag_a': 'A014', 'frag_b': 'B024', 'frag_c': 'C007', 'obj': nan},\\n {'frag_a': 'A014',\\n  'frag_b': 'B006',\\n  'frag_c': 'C014',\\n  'obj': 6.525903364971338e-18},\\n {'frag_a': 'A017', 'frag_b': 'B024', 'frag_c': 'C023', 'obj': nan},\\n {'frag_a': 'A014', 'frag_b': 'B002', 'frag_c': 'C013', 'obj': nan},\\n {'frag_a': 'A016', 'frag_b': 'B005', 'frag_c': 'C032', 'obj': nan},\\n {'frag_a': 'A007', 'frag_b': 'B026', 'frag_c': 'C032', 'obj': nan},\\n {'frag_a': 'A017',\\n  'frag_b': 'B024',\\n  'frag_c': 'C022',\\n  'obj': 1.3451843195023162e-17},\\n {'frag_a': 'A011', 'frag_b': 'B007', 'frag_c': 'C027', 'obj': nan},\\n {'frag_a': 'A017',\\n  'frag_b': 'B007',\\n  'frag_c': 'C015',\\n  'obj': 9.206727195235754e-18},\\n {'frag_a': 'A014',\\n  'frag_b': 'B006',\\n  'frag_c': 'C013',\\n  'obj': 7.923815265915032e-18},\\n {'frag_a': 'A002', 'frag_b': 'B007', 'frag_c': 'C025', 'obj': nan},\\n {'frag_a': 'A032', 'frag_b': 'B016', 'frag_c': 'C025', 'obj': nan},\\n {'frag_a': 'A002', 'frag_b': 'B016', 'frag_c': 'C025', 'obj': nan},\\n {'frag_a': 'A015',\\n  'frag_b': 'B023',\\n  'frag_c': 'C036',\\n  'obj': 1.754540316783665e-17},\\n {'frag_a': 'A015', 'frag_b': 'B020', 'frag_c': 'C036', 'obj': nan},\\n {'frag_a': 'A012',\\n  'frag_b': 'B011',\\n  'frag_c': 'C011',\\n  'obj': 6.40921915834097e-17},\\n {'frag_a': 'A015',\\n  'frag_b': 'B002',\\n  'frag_c': 'C041',\\n  'obj': 5.730015594568486e-19},\\n {'frag_a': 'A012',\\n  'frag_b': 'B007',\\n  'frag_c': 'C001',\\n  'obj': 9.244598780085763e-17},\\n {'frag_a': 'A012',\\n  'frag_b': 'B009',\\n  'frag_c': 'C010',\\n  'obj': 6.846003907017119e-17},\\n {'frag_a': 'A001', 'frag_b': 'B006', 'frag_c': 'C014', 'obj': nan},\\n {'frag_a': 'A001', 'frag_b': 'B023', 'frag_c': 'C042', 'obj': nan},\\n {'frag_a': 'A011',\\n  'frag_b': 'B006',\\n  'frag_c': 'C007',\\n  'obj': 7.731345439360771e-17},\\n {'frag_a': 'A016', 'frag_b': 'B011', 'frag_c': 'C017', 'obj': nan},\\n {'frag_a': 'A015',\\n  'frag_b': 'B001',\\n  'frag_c': 'C014',\\n  'obj': 2.523547276948713e-17},\\n {'frag_a': 'A012',\\n  'frag_b': 'B016',\\n  'frag_c': 'C025',\\n  'obj': 1.00314069049024e-16},\\n {'frag_a': 'A017',\\n  'frag_b': 'B012',\\n  'frag_c': 'C026',\\n  'obj': 4.950532097586806e-18},\\n {'frag_a': 'A010',\\n  'frag_b': 'B010',\\n  'frag_c': 'C020',\\n  'obj': 1.0083667809612752e-17},\\n {'frag_a': 'A016', 'frag_b': 'B021', 'frag_c': 'C006', 'obj': nan},\\n {'frag_a': 'A010', 'frag_b': 'B015', 'frag_c': 'C058', 'obj': nan},\\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C026', 'obj': nan},\\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C043', 'obj': nan},\\n {'frag_a': 'A014',\\n  'frag_b': 'B008',\\n  'frag_c': 'C022',\\n  'obj': 6.112709672620424e-18},\\n {'frag_a': 'A011',\\n  'frag_b': 'B022',\\n  'frag_c': 'C043',\\n  'obj': 2.9033219264089226e-17},\\n {'frag_a': 'A032',\\n  'frag_b': 'B022',\\n  'frag_c': 'C034',\\n  'obj': 3.303392062973488e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C026',\\n  'obj': 5.533548486096295e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C023',\\n  'obj': 8.889847034437943e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C024',\\n  'obj': 1.4220443754121085e-16},\\n {'frag_a': 'A002',\\n  'frag_b': 'B026',\\n  'frag_c': 'C035',\\n  'obj': 4.201224852544019e-17},\\n {'frag_a': 'A011',\\n  'frag_b': 'B016',\\n  'frag_c': 'C025',\\n  'obj': 1.0106786073004218e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B018',\\n  'frag_c': 'C032',\\n  'obj': 5.693911247335016e-17},\\n {'frag_a': 'A017',\\n  'frag_b': 'B002',\\n  'frag_c': 'C032',\\n  'obj': 1.0966663481608477e-17},\\n {'frag_a': 'A012',\\n  'frag_b': 'B002',\\n  'frag_c': 'C041',\\n  'obj': 2.921517766345191e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B007',\\n  'frag_c': 'C006',\\n  'obj': 9.004995950322481e-18},\\n {'frag_a': 'A011',\\n  'frag_b': 'B016',\\n  'frag_c': 'C036',\\n  'obj': 8.765202846540386e-17},\\n {'frag_a': 'A017',\\n  'frag_b': 'B018',\\n  'frag_c': 'C023',\\n  'obj': 1.5526620557867162e-17},\\n {'frag_a': 'A016',\\n  'frag_b': 'B019',\\n  'frag_c': 'C058',\\n  'obj': 8.19820155674067e-17},\\n {'frag_a': 'A015',\\n  'frag_b': 'B008',\\n  'frag_c': 'C036',\\n  'obj': 4.6124037317905746e-18},\\n {'frag_a': 'A002', 'frag_b': 'B004', 'frag_c': 'C042', 'obj': nan},\\n {'frag_a': 'A011', 'frag_b': 'B001', 'frag_c': 'C043', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C028',\\n  'obj': 1.4483124197741937e-16},\\n {'frag_a': 'A017',\\n  'frag_b': 'B025',\\n  'frag_c': 'C032',\\n  'obj': 1.2990177468957796e-16},\\n {'frag_a': 'A001', 'frag_b': 'B024', 'frag_c': 'C022', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C025',\\n  'obj': 1.0523847768248343e-16},\\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C022', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C043',\\n  'obj': 7.808046333127821e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C024',\\n  'obj': 6.468748207729169e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C018',\\n  'obj': 2.09633619724748e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C019',\\n  'obj': 8.236931948493235e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C023',\\n  'obj': 1.2548463592385985e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C020',\\n  'obj': 2.1298908476023633e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C021',\\n  'obj': 1.4618306676436623e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C025',\\n  'obj': 1.189922738375221e-16},\\n {'frag_a': 'A001',\\n  'frag_b': 'B024',\\n  'frag_c': 'C028',\\n  'obj': 1.281002844906603e-16},\\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C011', 'obj': nan},\\n {'frag_a': 'A032', 'frag_b': 'B020', 'frag_c': 'C037', 'obj': nan},\\n {'frag_a': 'A017', 'frag_b': 'B023', 'frag_c': 'C032', 'obj': nan},\\n {'frag_a': 'A010', 'frag_b': 'B004', 'frag_c': 'C042', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C030',\\n  'obj': 4.384016890595388e-17},\\n {'frag_a': 'A014', 'frag_b': 'B002', 'frag_c': 'C017', 'obj': nan},\\n {'frag_a': 'A014',\\n  'frag_b': 'B020',\\n  'frag_c': 'C027',\\n  'obj': 1.0739333166057634e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B013',\\n  'frag_c': 'C018',\\n  'obj': 3.967021469424605e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B022',\\n  'frag_c': 'C025',\\n  'obj': 8.580904666671667e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C042',\\n  'obj': 1.5779875470119115e-16},\\n {'frag_a': 'A015', 'frag_b': 'B022', 'frag_c': 'C010', 'obj': nan},\\n {'frag_a': 'A011', 'frag_b': 'B008', 'frag_c': 'C020', 'obj': nan},\\n {'frag_a': 'A016', 'frag_b': 'B017', 'frag_c': 'C043', 'obj': nan},\\n {'frag_a': 'A016', 'frag_b': 'B018', 'frag_c': 'C017', 'obj': nan},\\n {'frag_a': 'A016', 'frag_b': 'B026', 'frag_c': 'C016', 'obj': nan},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C044',\\n  'obj': 1.5754107488570007e-16},\\n {'frag_a': 'A017',\\n  'frag_b': 'B013',\\n  'frag_c': 'C005',\\n  'obj': 1.5061609372299598e-17},\\n {'frag_a': 'A001',\\n  'frag_b': 'B001',\\n  'frag_c': 'C014',\\n  'obj': 3.0894372345716633e-17},\\n {'frag_a': 'A014', 'frag_b': 'B017', 'frag_c': 'C031', 'obj': nan}]\"\n     },\n     \"execution_count\": 9,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# get gryffin observations\\n\",\n    \"observations = make_gryffin_observations(df_done)\\n\",\n    \"\\n\",\n    \"observations\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"id\": \"6b861cd3\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# get all the unique frags in the previous observations to add onto the available \\n\",\n    \"# fragments (otherwise Gryffin will crash)\\n\",\n    \"a_prev_hids = list(set([o['fragment_a'] for o in observations]))\\n\",\n    \"b_prev_hids = list(set([o['fragment_b'] for o in observations]))\\n\",\n    \"c_prev_hids = list(set([o['fragment_c'] for o in observations]))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"id\": \"0e3bb1fb\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def get_lab_frags(lab):\\n\",\n    \"    ''' returns the set of available fragments for a specific laboratory\\n\",\n    \"    '''\\n\",\n    \"    a_hids = db.get_available_fragments(\\\"fragment_a\\\", lab)[\\\"molecule.hid\\\"].tolist()\\n\",\n    \"    b_hids = db.get_available_fragments(\\\"fragment_b\\\", lab)[\\\"molecule.hid\\\"].tolist()\\n\",\n    \"    c_hids = db.get_available_fragments(\\\"fragment_c\\\", lab)[\\\"molecule.hid\\\"].tolist()\\n\",\n    \"    \\n\",\n    \"    return {'fragment_a': a_hids, 'fragment_b': b_hids, 'fragment_c': c_hids}\\n\",\n    \"\\n\",\n    \"def get_frags():\\n\",\n    \"    ''' return all the unique molecules across all labs\\n\",\n    \"    '''\\n\",\n    \"    a_hids_all = []\\n\",\n    \"    b_hids_all = []\\n\",\n    \"    c_hids_all = []\\n\",\n    \"    \\n\",\n    \"    for lab in ['Toronto', 'Illinois']:\\n\",\n    \"        lab_frags = get_lab_frags(lab)\\n\",\n    \"        a_hids_all.extend(lab_frags['fragment_a'])\\n\",\n    \"        b_hids_all.extend(lab_frags['fragment_b'])\\n\",\n    \"        c_hids_all.extend(lab_frags['fragment_c'])\\n\",\n    \"    \\n\",\n    \"    a_hids_all = list(set(a_hids_all))\\n\",\n    \"    b_hids_all = list(set(b_hids_all))\\n\",\n    \"    c_hids_all = list(set(c_hids_all))\\n\",\n    \"    \\n\",\n    \"    return a_hids_all, b_hids_all, c_hids_all\\n\",\n    \"    \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"id\": \"1150b009\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"NUM A FRAGS :  33\\n\",\n      \"NUM B FRAGS :  55\\n\",\n      \"NUM C FRAGS :  161\\n\",\n      \"NUM ACCESSIBLE MOLS :  292215\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"a_hids_all, b_hids_all, c_hids_all = get_frags()\\n\",\n    \"\\n\",\n    \"# add fragments from previous iterations\\n\",\n    \"a_hids_all = list(set(a_hids_all + a_prev_hids))\\n\",\n    \"b_hids_all = list(set(b_hids_all + b_prev_hids))\\n\",\n    \"c_hids_all = list(set(c_hids_all + c_prev_hids))\\n\",\n    \"\\n\",\n    \"print('NUM A FRAGS : ', len(a_hids_all))\\n\",\n    \"print('NUM B FRAGS : ', len(b_hids_all))\\n\",\n    \"print('NUM C FRAGS : ', len(c_hids_all))\\n\",\n    \"\\n\",\n    \"print('NUM ACCESSIBLE MOLS : ', len(a_hids_all)*len(b_hids_all)*len(c_hids_all))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"id\": \"45dc2711\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": \"{'frag_a': ['A014',\\n  'A015',\\n  'A018',\\n  'A021',\\n  'A020',\\n  'A002',\\n  'A004',\\n  'A003',\\n  'A022',\\n  'A023',\\n  'A024',\\n  'A029',\\n  'A028',\\n  'A027',\\n  'A026',\\n  'A032',\\n  'A001',\\n  'A008',\\n  'A034',\\n  'A035',\\n  'A036',\\n  'A038',\\n  'A039',\\n  'A040',\\n  'A042'],\\n 'frag_b': ['B033',\\n  'B031',\\n  'B043',\\n  'B049',\\n  'B051',\\n  'B047',\\n  'B057',\\n  'B059',\\n  'B038',\\n  'B042',\\n  'B054',\\n  'B068',\\n  'B036',\\n  'B035',\\n  'B032',\\n  'B055',\\n  'B037',\\n  'B039',\\n  'B044',\\n  'B046',\\n  'B048',\\n  'B052',\\n  'B058',\\n  'B060',\\n  'B062',\\n  'B063'],\\n 'frag_c': ['C002',\\n  'C003',\\n  'C004',\\n  'C005',\\n  'C006',\\n  'C007',\\n  'C001',\\n  'C008',\\n  'C009',\\n  'C012',\\n  'C013',\\n  'C010',\\n  'C011',\\n  'C014',\\n  'C015',\\n  'C016',\\n  'C017',\\n  'C018',\\n  'C019',\\n  'C020',\\n  'C021',\\n  'C022',\\n  'C023',\\n  'C024',\\n  'C025',\\n  'C026',\\n  'C028',\\n  'C029',\\n  'C030',\\n  'C031',\\n  'C032',\\n  'C035',\\n  'C036',\\n  'C034',\\n  'C037',\\n  'C038',\\n  'C039',\\n  'C040',\\n  'C041',\\n  'C042',\\n  'C043',\\n  'C044',\\n  'C047',\\n  'C062',\\n  'C064',\\n  'C067',\\n  'C072',\\n  'C073',\\n  'C074',\\n  'C075',\\n  'C076',\\n  'C078',\\n  'C079',\\n  'C080',\\n  'C082',\\n  'C084',\\n  'C087',\\n  'C088',\\n  'C089',\\n  'C085',\\n  'C086',\\n  'C090',\\n  'C091',\\n  'C092',\\n  'C094',\\n  'C095',\\n  'C096',\\n  'C097',\\n  'C098',\\n  'C099',\\n  'C100',\\n  'C101',\\n  'C102',\\n  'C103',\\n  'C104',\\n  'C105',\\n  'C111',\\n  'C114',\\n  'C115',\\n  'C116',\\n  'C117',\\n  'C119',\\n  'C120',\\n  'C121',\\n  'C122',\\n  'C110',\\n  'C107',\\n  'C108',\\n  'C109',\\n  'C112',\\n  'C123',\\n  'C124',\\n  'C125',\\n  'C126',\\n  'C128',\\n  'C129',\\n  'C131',\\n  'C132',\\n  'C133',\\n  'C134',\\n  'C135',\\n  'C136',\\n  'C137',\\n  'C144',\\n  'C145',\\n  'C146',\\n  'C150',\\n  'C151',\\n  'C152',\\n  'C157',\\n  'C148',\\n  'C149',\\n  'C153',\\n  'C027',\\n  'C046',\\n  'C081',\\n  'C106',\\n  'C138',\\n  'C139',\\n  'C140',\\n  'C141',\\n  'C142',\\n  'C143',\\n  'C058',\\n  'C147',\\n  'C154',\\n  'C158',\\n  'C159',\\n  'C161',\\n  'C155',\\n  'C160']}\"\n     },\n     \"execution_count\": 15,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# get toronto and UIUC available frags\\n\",\n    \"toronto_frags = get_lab_frags('Toronto')\\n\",\n    \"uiuc_frags = get_lab_frags('Illinois')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"96afbd85\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%% md\\n\"\n    }\n   },\n   \"source\": [\n    \"## Build Gryffin \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"1476b963\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def get_descriptors(hid, descriptors):\\n\",\n    \"    ''' looks up and returns descriptors for a particular fragment\\n\",\n    \"    \\n\",\n    \"    Args:\\n\",\n    \"        hid (str): human readable identifier of the fragment\\n\",\n    \"        descriptors (pd.DataFrame): dataframe corresponding to the type of fragment\\n\",\n    \"    '''\\n\",\n    \"    return descriptors[descriptors.hid==hid].iloc[0, 1:].values.astype(np.float).tolist()\\n\",\n    \"\\n\",\n    \"def mol_hid_from_params(params):\\n\",\n    \"    mol_hids = []\\n\",\n    \"    for param in params:\\n\",\n    \"        mol_hids.append(''.join([param['fragment_a'], param['fragment_b'], param['fragment_c']]))\\n\",\n    \"    \\n\",\n    \"    return mol_hids\\n\",\n    \"        \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"id\": \"f3e7785a\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"NUM DESC A  30\\n\",\n      \"NUM DESC B  30\\n\",\n      \"NUM DESC C  35\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# load descriptors from disk\\n\",\n    \"pca_desc_a = pd.read_csv('descriptors/gen2_pca_desc_a.csv', index_col=None)\\n\",\n    \"pca_desc_b = pd.read_csv('descriptors/gen2_pca_desc_b.csv', index_col=None)\\n\",\n    \"pca_desc_c = pd.read_csv('descriptors/gen2_pca_desc_c.csv', index_col=None)\\n\",\n    \"print('NUM DESC A ', pca_desc_a.shape[1]-1)\\n\",\n    \"print('NUM DESC B ', pca_desc_b.shape[1]-1)\\n\",\n    \"print('NUM DESC C ', pca_desc_c.shape[1]-1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"id\": \"4c5d87c2\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"NUM AVAIL FRAGS A :  33\\n\",\n      \"NUM AVAIL FRAGS B :  55\\n\",\n      \"NUM AVAIL FRAGS C :  161\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# set the available fragments to make the Gryffin search space \\n\",\n    \"# TODO: change this to only those available\\n\",\n    \"avail_frags_a = a_hids_all\\n\",\n    \"avail_frags_b = b_hids_all\\n\",\n    \"avail_frags_c = c_hids_all\\n\",\n    \"print('NUM AVAIL FRAGS A : ', len(avail_frags_a))\\n\",\n    \"print('NUM AVAIL FRAGS B : ', len(avail_frags_b))\\n\",\n    \"print('NUM AVAIL FRAGS C : ', len(avail_frags_c))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"a402d1ba\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# Gryffin config\\n\",\n    \"\\n\",\n    \"#sampling_strategies = np.linspace(-1, 1, 40)\\n\",\n    \"sampling_strategies_1 = np.linspace(0.6, 1, 30)\\n\",\n    \"sampling_strategies_2 = np.linspace(-1, 0.5, 10)\\n\",\n    \"sampling_strategies = np.concatenate((sampling_strategies_1, sampling_strategies_2))\\n\",\n    \"#sampling_strategies = np.linspace(-1, 0.45, 20)\\n\",\n    \"\\n\",\n    \"# generate descriptors\\n\",\n    \"FRAG_A_DESC = {i: get_descriptors(i, pca_desc_a) for i in avail_frags_a}\\n\",\n    \"FRAG_B_DESC = {i: get_descriptors(i, pca_desc_b) for i in avail_frags_b}\\n\",\n    \"FRAG_C_DESC = {i: get_descriptors(i, pca_desc_c) for i in avail_frags_c}\\n\",\n    \"\\n\",\n    \"# FRAG_A_DESC = {i: None for i in avail_frags_a}\\n\",\n    \"# FRAG_B_DESC = {i: None for i in avail_frags_b}\\n\",\n    \"# FRAG_C_DESC = {i: None for i in avail_frags_c}\\n\",\n    \"\\n\",\n    \"# fwa = feasibility-weighted acquisition\\n\",\n    \"# fia = feasibility-interpolated acquisition\\n\",\n    \"# fca = feasibility-constrained acquisition --> use, param=0.2 ish works best on cat benchmarks\\n\",\n    \"\\n\",\n    \"config = {\\n\",\n    \"     \\\"general\\\": {\\n\",\n    \"             \\\"backend\\\": 'tensorflow',\\n\",\n    \"             \\\"num_cpus\\\": 4,\\n\",\n    \"             \\\"auto_desc_gen\\\": False, # dynamic Gryffin\\n\",\n    \"             \\\"batches\\\": 1,\\n\",\n    \"             \\\"sampling_strategies\\\": 1,\\n\",\n    \"             \\\"feas_approach\\\": 'fca',\\n\",\n    \"             \\\"feas_param\\\": 0.2,\\n\",\n    \"             \\\"boosted\\\":  True,\\n\",\n    \"             \\\"caching\\\": False,\\n\",\n    \"             \\\"random_seed\\\": 22031996,\\n\",\n    \"             \\\"acquisition_optimizer\\\": 'genetic',\\n\",\n    \"             \\\"verbosity\\\": 3\\n\",\n    \"                },\\n\",\n    \"    \\\"parameters\\\": [\\n\",\n    \"        {\\\"name\\\": \\\"fragment_a\\\", \\\"type\\\": \\\"categorical\\\", \\\"category_details\\\": FRAG_A_DESC },\\n\",\n    \"        {\\\"name\\\": \\\"fragment_b\\\", \\\"type\\\": \\\"categorical\\\", \\\"category_details\\\": FRAG_B_DESC },\\n\",\n    \"        {\\\"name\\\": \\\"fragment_c\\\", \\\"type\\\": \\\"categorical\\\", \\\"category_details\\\": FRAG_C_DESC },\\n\",\n    \"      \\n\",\n    \"    ],\\n\",\n    \"    \\\"objectives\\\": [\\n\",\n    \"        {\\\"name\\\": \\\"obj\\\", \\\"goal\\\": \\\"max\\\"},\\n\",\n    \"    ]\\n\",\n    \"}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"c4d0fd1d\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# instantiate gryffin\\n\",\n    \"gryffin = Gryffin(config_dict=config, known_constraints=known_constraints)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"dd066138\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    },\n    \"scrolled\": true\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# recommend a batch of samples\\n\",\n    \"samples = []\\n\",\n    \"for ix, sampling_strat in enumerate(sampling_strategies):\\n\",\n    \"    \\n\",\n    \"    sample = gryffin.recommend(observations, sampling_strategies=[sampling_strat])\\n\",\n    \"    print(f'\\\\nSAMPLING STRATEGY : {sampling_strat} SAMPLE : {sample}\\\\n')\\n\",\n    \"    samples.extend(sample) \\n\",\n    \"    \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"a9d5a594\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"def check_duplicates(samples, observations):\\n\",\n    \"    ''' returns True if there are duplicates, False if there are none\\n\",\n    \"    '''\\n\",\n    \"    sample_hids = [''.join([s['fragment_a'],s['fragment_b'],s['fragment_c']]) for s in samples]\\n\",\n    \"    observ_hids = [''.join([o['fragment_a'],o['fragment_b'],o['fragment_c']]) for o in observations]\\n\",\n    \"    \\n\",\n    \"    # check duplicates over previous observations \\n\",\n    \"    is_obs_dup = any(s in observ_hids for s in sample_hids)\\n\",\n    \"    \\n\",\n    \"    # check duplicates within the batch\\n\",\n    \"    is_samp_dup = len(set(sample_hids))<len(sample_hids)\\n\",\n    \"    \\n\",\n    \"    return is_obs_dup, is_samp_dup\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"ece03d6c\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"check_duplicates(samples, observations)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"d017e982\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"samples\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"e5f1b511\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"rxn_transmut = allchem.ReactionFromSmarts(\\\"[*:1][Br,I]>>[*:1][Po]\\\")\\n\",\n    \"rxn_b_c = allchem.ReactionFromSmarts(\\n\",\n    \"    \\\"[Br,I][*:1].C[N+]12CC(=O)O[B-]1([*:2])OC(=O)C2>>[*:1]-[*:2]\\\"\\n\",\n    \")\\n\",\n    \"rxn_a_b_c = allchem.ReactionFromSmarts(\\\"CC1(C)OB([*:1])OC1(C)C.[*:2][Po]>>[*:1]-[*:2]\\\")\\n\",\n    \"rxn_a_b_c2 = allchem.ReactionFromSmarts(\\\"[*:1]B(O)O.[*:2][Po]>>[*:1]-[*:2]\\\")\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def assemble_fragments(hid_a, hid_b, hid_c):\\n\",\n    \"    smiles_a = db.get_fragment_details(hid_a, identifier_type='hid')['smiles']\\n\",\n    \"    smiles_b = db.get_fragment_details(hid_b, identifier_type='hid')['smiles']\\n\",\n    \"    smiles_c = db.get_fragment_details(hid_c, identifier_type='hid')['smiles']\\n\",\n    \"\\n\",\n    \"    a = chem.MolFromSmiles(smiles_a)\\n\",\n    \"    b = chem.MolFromSmiles(smiles_b)\\n\",\n    \"    c = chem.MolFromSmiles(smiles_c)\\n\",\n    \"    if a is None or b is None or c is None:\\n\",\n    \"        raise ValueError(\\\"Invalid SMILES\\\")\\n\",\n    \"\\n\",\n    \"    # Building the molecule... there is probably a better way\\n\",\n    \"    b_transmut = rxn_transmut.RunReactants([b])[0][0]\\n\",\n    \"    b_c = rxn_b_c.RunReactants([c, b_transmut])[0][0]\\n\",\n    \"    b_c_b = rxn_b_c.RunReactants([b_c, b_transmut])[0][0]\\n\",\n    \"    try:\\n\",\n    \"        a_b_c_b = rxn_a_b_c.RunReactants([a, b_c_b])[0][0]\\n\",\n    \"        a_b_c_b_a = rxn_a_b_c.RunReactants([a, a_b_c_b])[0][0]\\n\",\n    \"    except:\\n\",\n    \"        a_b_c_b = rxn_a_b_c2.RunReactants([a, b_c_b])[0][0]\\n\",\n    \"        a_b_c_b_a = rxn_a_b_c2.RunReactants([a, a_b_c_b])[0][0]\\n\",\n    \"    return chem.MolToSmiles(a_b_c_b_a)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"d087bea2\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"molecule_smiles = []\\n\",\n    \"molecule_hids = []\\n\",\n    \"\\n\",\n    \"for sample in samples:\\n\",\n    \"    molecule_hids.append(''.join([sample['fragment_a'],sample['fragment_b'],sample['fragment_c']]))\\n\",\n    \"    molecule_smiles.append(assemble_fragments(sample['fragment_a'], sample['fragment_b'], sample['fragment_c']))\\n\",\n    \"    \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"27556cbf\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"molecule_mols = [chem.MolFromSmiles(s) for s in molecule_smiles]\\n\",\n    \"\\n\",\n    \"img = chem.Draw.MolsToGridImage(\\n\",\n    \"    molecule_mols, molsPerRow=5, subImgSize=(400,400), returnPNG=False, legends=molecule_hids,\\n\",\n    \")\\n\",\n    \"img.save('round_3_samples_all.png')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"with open('round_3_samples_all.txt', 'w') as f:\\n\",\n    \"    for smile, hid in zip(molecule_smiles, molecule_hids):\\n\",\n    \"        f.write(f'{smile}\\\\t{hid}\\\\n')\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%% md\\n\"\n    }\n   },\n   \"source\": [\n    \"## Write the new target molecules/syntheses to the DB\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"for sample, smi in zip(samples, molecule_smiles):\\n\",\n    \"    print(f'>> Creating DB entry for sample {sample[\\\"fragment_a\\\"]} {sample[\\\"fragment_b\\\"]} {sample[\\\"fragment_c\\\"]}...')\\n\",\n    \"    db.create_target_compound(\\n\",\n    \"        fragments=[sample[\\\"fragment_a\\\"], sample[\\\"fragment_b\\\"], sample[\\\"fragment_c\\\"]],\\n\",\n    \"        smiles=smi\\n\",\n    \"    )\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"collapsed\": false,\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# db.get_fragment_details('A011', identifier_type='hid')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"0d5ac31d\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# db.client.query_database('synthesis', limit=1000)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"d0adc131\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# # load molecules from the first bacth\\n\",\n    \"# with open('first_batch_smiles_uoft_only.txt', 'r') as f:\\n\",\n    \"#     smiles_ = f.readlines()\\n\",\n    \"    \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"4fa26279\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# smiles = []\\n\",\n    \"# hids = []\\n\",\n    \"# for line in smiles_:\\n\",\n    \"#\\n\",\n    \"#     split = line.split('\\\\t')\\n\",\n    \"#     smiles.append(split[0])\\n\",\n    \"#     hids.append(split[1].strip())\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"39f2953a\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# mols = [chem.MolFromSmiles(s) for s in smiles]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"47cf4157\",\n   \"metadata\": {\n    \"pycharm\": {\n     \"name\": \"#%%\\n\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# img = chem.Draw.MolsToGridImage(\\n\",\n    \"#     mols, molsPerRow=10, subImgSize=(400,400), returnPNG=False, legends=hids,\\n\",\n    \"# )\\n\",\n    \"# img.save('first_round_samples_uoft_only_landscape.png')\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3.7.13 ('acdc_lasers')\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.7.13\"\n  },\n  \"vscode\": {\n   \"interpreter\": {\n    \"hash\": \"1282b83e0cb17e60c6533d53d9f5aa1cd7e7df4ed361b2ac837ce7830e0841c2\"\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/recommendations/round_3/run_iteration.ipynb b/recommendations/round_3/run_iteration.ipynb
--- a/recommendations/round_3/run_iteration.ipynb	(revision adfadfc09f9ce7d148a07e8addd1c2df93f6d2aa)
+++ b/recommendations/round_3/run_iteration.ipynb	(date 1660665306292)
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 3,
    "id": "87d90574",
    "metadata": {
     "pycharm": {
@@ -17,7 +17,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 4,
    "id": "7adfedfc",
    "metadata": {
     "pycharm": {
@@ -56,7 +56,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 5,
    "id": "d2796b63",
    "metadata": {
     "pycharm": {
@@ -87,7 +87,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 6,
    "id": "f79fb417",
    "metadata": {
     "pycharm": {
@@ -101,7 +101,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 7,
    "id": "b75ae3f6",
    "metadata": {
     "pycharm": {
@@ -113,27 +113,27 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "(236, 12)\n"
+      "(188, 12)\n"
      ]
     },
     {
      "data": {
-      "text/plain": "    product.hid                                     product.smiles  \\\n0  A001B046C003  Cc1cc(-c2cc(F)cc(-c3ccc(-n4c5ccccc5c5ccccc54)c...   \n1  A041B058C100  Cn1cnc2ccc(-c3ccc(C=Cc4cnc(C=Cc5ccc(-c6ccc7ncn...   \n2  A001B031C021  Cc1cc(-c2ccc(-c3cc(C)c(-c4ccc(-n5c6ccccc6c6ccc...   \n3  A028B038C085  CCCCCCCCCCCCc1cc(-c2ccccc2-c2ccc(N3c4ccccc4CCc...   \n4  A039B060C079  CCn1c2ccccc2c2cc(-c3ccccc3-c3ccccc3-c3ccc(C)c(...   \n\n  product.optical_properties fragment_a.hid  \\\n0                         {}           A001   \n1                         {}           A041   \n2                         {}           A001   \n3                         {}           A028   \n4                         {}           A039   \n\n                                  fragment_a.smiles fragment_b.hid  \\\n0   CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B046   \n1               Cn1cnc2ccc(B3OC(C)(C)C(C)(C)O3)cc21           B058   \n2   CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B031   \n3  CC1(C)OB(c2ccc(N3c4ccccc4CCc4ccccc43)cc2)OC1(C)C           B038   \n4        CCn1c2ccccc2c2cc(B3OC(C)(C)C(C)(C)O3)ccc21           B060   \n\n                                   fragment_b.smiles fragment_c.hid  \\\n0  CC1(C)C(=O)O[B-]2(c3cc(F)cc(Br)c3)OC(=O)C(C)(C...           C003   \n1  CC1(C)C(=O)O[B-]2(/C=C/c3ccc(Br)cc3)OC(=O)C(C)...           C100   \n2  Cc1cc([B-]23OC(=O)C(C)(C)[N+]2(C)C(C)(C)C(=O)O...           C021   \n3  CC1(C)C(=O)O[B-]2(c3ccccc3Br)OC(=O)C(C)(C)[N+]21C           C085   \n4  CC1(C)C(=O)O[B-]2(c3ccccc3-c3ccccc3Br)OC(=O)C(...           C079   \n\n           fragment_c.smiles                synthesis.synthesis_id  \\\n0         Cc1cc(Br)c(C)cc1Br  4f21e4b4-5259-42e3-ae43-f6a276e563f6   \n1              Brc1cnc(Br)s1  63bea729-df1c-43ca-8078-90ba52716ffd   \n2     FC(F)(F)c1cc(Br)ccc1Br  97b29bb5-16fb-4b5c-9fe8-ffdd6a869ebe   \n3  CCCCCCCCCCCCc1cc(Br)sc1Br  9839e50f-d7dc-4f63-a682-5feb2f99579b   \n4            Cc1ccc(Br)cc1Br  df641953-a3eb-4c88-9d04-a8b024e4a502   \n\n  synthesis.status                 synthesis.molecule_id  \n0        AVAILABLE  ced41854-1953-4071-b48e-1dd1189f3a9e  \n1        AVAILABLE  e9b6f686-e5d5-4a2e-a21d-e52cca5036dd  \n2        AVAILABLE  50db756f-a682-4e30-b39c-e3af5f2b111d  \n3        AVAILABLE  b8e0476d-00d2-45df-9f0b-5c9b2029d1a2  \n4        AVAILABLE  5963ac30-5d0c-479b-a11c-86c95a56adc5  ",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product.hid</th>\n      <th>product.smiles</th>\n      <th>product.optical_properties</th>\n      <th>fragment_a.hid</th>\n      <th>fragment_a.smiles</th>\n      <th>fragment_b.hid</th>\n      <th>fragment_b.smiles</th>\n      <th>fragment_c.hid</th>\n      <th>fragment_c.smiles</th>\n      <th>synthesis.synthesis_id</th>\n      <th>synthesis.status</th>\n      <th>synthesis.molecule_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A001B046C003</td>\n      <td>Cc1cc(-c2cc(F)cc(-c3ccc(-n4c5ccccc5c5ccccc54)c...</td>\n      <td>{}</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B046</td>\n      <td>CC1(C)C(=O)O[B-]2(c3cc(F)cc(Br)c3)OC(=O)C(C)(C...</td>\n      <td>C003</td>\n      <td>Cc1cc(Br)c(C)cc1Br</td>\n      <td>4f21e4b4-5259-42e3-ae43-f6a276e563f6</td>\n      <td>AVAILABLE</td>\n      <td>ced41854-1953-4071-b48e-1dd1189f3a9e</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A041B058C100</td>\n      <td>Cn1cnc2ccc(-c3ccc(C=Cc4cnc(C=Cc5ccc(-c6ccc7ncn...</td>\n      <td>{}</td>\n      <td>A041</td>\n      <td>Cn1cnc2ccc(B3OC(C)(C)C(C)(C)O3)cc21</td>\n      <td>B058</td>\n      <td>CC1(C)C(=O)O[B-]2(/C=C/c3ccc(Br)cc3)OC(=O)C(C)...</td>\n      <td>C100</td>\n      <td>Brc1cnc(Br)s1</td>\n      <td>63bea729-df1c-43ca-8078-90ba52716ffd</td>\n      <td>AVAILABLE</td>\n      <td>e9b6f686-e5d5-4a2e-a21d-e52cca5036dd</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A001B031C021</td>\n      <td>Cc1cc(-c2ccc(-c3cc(C)c(-c4ccc(-n5c6ccccc6c6ccc...</td>\n      <td>{}</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B031</td>\n      <td>Cc1cc([B-]23OC(=O)C(C)(C)[N+]2(C)C(C)(C)C(=O)O...</td>\n      <td>C021</td>\n      <td>FC(F)(F)c1cc(Br)ccc1Br</td>\n      <td>97b29bb5-16fb-4b5c-9fe8-ffdd6a869ebe</td>\n      <td>AVAILABLE</td>\n      <td>50db756f-a682-4e30-b39c-e3af5f2b111d</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A028B038C085</td>\n      <td>CCCCCCCCCCCCc1cc(-c2ccccc2-c2ccc(N3c4ccccc4CCc...</td>\n      <td>{}</td>\n      <td>A028</td>\n      <td>CC1(C)OB(c2ccc(N3c4ccccc4CCc4ccccc43)cc2)OC1(C)C</td>\n      <td>B038</td>\n      <td>CC1(C)C(=O)O[B-]2(c3ccccc3Br)OC(=O)C(C)(C)[N+]21C</td>\n      <td>C085</td>\n      <td>CCCCCCCCCCCCc1cc(Br)sc1Br</td>\n      <td>9839e50f-d7dc-4f63-a682-5feb2f99579b</td>\n      <td>AVAILABLE</td>\n      <td>b8e0476d-00d2-45df-9f0b-5c9b2029d1a2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A039B060C079</td>\n      <td>CCn1c2ccccc2c2cc(-c3ccccc3-c3ccccc3-c3ccc(C)c(...</td>\n      <td>{}</td>\n      <td>A039</td>\n      <td>CCn1c2ccccc2c2cc(B3OC(C)(C)C(C)(C)O3)ccc21</td>\n      <td>B060</td>\n      <td>CC1(C)C(=O)O[B-]2(c3ccccc3-c3ccccc3Br)OC(=O)C(...</td>\n      <td>C079</td>\n      <td>Cc1ccc(Br)cc1Br</td>\n      <td>df641953-a3eb-4c88-9d04-a8b024e4a502</td>\n      <td>AVAILABLE</td>\n      <td>5963ac30-5d0c-479b-a11c-86c95a56adc5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+      "text/plain": "      product.hid                                     product.smiles  \\\n0    A001B003C001  C(=Cc1ccc(-n2c3ccccc3c3ccccc32)cc1)c1ccc(-c2cc...   \n1    A001B003C002  C(=Cc1ccc(-n2c3ccccc3c3ccccc32)cc1)c1ccc(C=Cc2...   \n2    A001B003C003  Cc1cc(C=Cc2ccc(-n3c4ccccc4c4ccccc43)cc2)c(C)cc...   \n3    A001B003C004  Fc1c(F)c(-c2c(F)c(F)c(C=Cc3ccc(-n4c5ccccc5c5cc...   \n4    A001B003C005  CC1(C)c2cc(C=Cc3ccc(-n4c5ccccc5c5ccccc54)cc3)c...   \n..            ...                                                ...   \n183  A016B026C016  Cn1cnc2ccc(-c3ncccc3-c3ccc(-c4ccc(-c5ccc(-c6cc...   \n184  A001B001C044  O=S(=O)(F)c1cc(C=Cc2ccc(-c3ccc(-n4c5ccccc5c5cc...   \n185  A017B013C005  Cn1ccc2cc(-c3ccc(C#N)c(-c4ccc5c(c4)C(C)(C)c4cc...   \n186  A001B001C014  Fc1c(F)c(C=Cc2ccc(-c3ccc(-n4c5ccccc5c5ccccc54)...   \n187  A014B017C031  CN(C)c1ccc(-c2ccc(-c3ccc(-c4ccc(-c5ccc(-c6ccc(...   \n\n                            product.optical_properties fragment_a.hid  \\\n0    {'PL_lambda_max': 443.6, 'validation_status': ...           A001   \n1    {'PL_lambda_max': 448.2, 'validation_status': ...           A001   \n2    {'PL_lambda_max': 453.6, 'validation_status': ...           A001   \n3    {'PL_lambda_max': 541.1, 'validation_status': ...           A001   \n4    {'PL_lambda_max': 445.1, 'validation_status': ...           A001   \n..                                                 ...            ...   \n183  {'job': 'A016B026C016_optics_A016B026C016_4.47...           A016   \n184  {'job': 'A001B001C044_optics_A001B001C044_9.91...           A001   \n185  {'job': 'A017B013C005_optics_A017B013C005_3.80...           A017   \n186  {'job': 'A001B001C014_optics_A001B001C014_3.86...           A001   \n187          {'validation_status': 'failed synthesis'}           A014   \n\n                                   fragment_a.smiles fragment_b.hid  \\\n0    CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B003   \n1    CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B003   \n2    CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B003   \n3    CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B003   \n4    CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B003   \n..                                               ...            ...   \n183                            Cn1cnc2ccc(B(O)O)cc21           B026   \n184  CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B001   \n185                            Cn1ccc2cc(B(O)O)ccc21           B013   \n186  CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B001   \n187               CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)cc1           B017   \n\n                                     fragment_b.smiles fragment_c.hid  \\\n0                 C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2           C001   \n1                 C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2           C002   \n2                 C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2           C003   \n3                 C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2           C004   \n4                 C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2           C005   \n..                                                 ...            ...   \n183             C[N+]12CC(=O)O[B-]1(c1cccnc1I)OC(=O)C2           C016   \n184     C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2           C044   \n185       C[N+]12CC(=O)O[B-]1(c1cc(Br)ccc1C#N)OC(=O)C2           C005   \n186     C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2           C014   \n187  C[N+]12CC(=O)O[B-]1(c1ccc(-c3ccc(Br)s3)s1)OC(=...           C031   \n\n                                 fragment_c.smiles  \\\n0                        Brc1ccc(-c2ccc(Br)cc2)cc1   \n1                                     Ic1ccc(I)cc1   \n2                               Cc1cc(Br)c(C)cc1Br   \n3    Fc1c(F)c(-c2c(F)c(F)c(Br)c(F)c2F)c(F)c(F)c1Br   \n4                 CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21   \n..                                             ...   \n183           Brc1ccc(-c2ccc(-c3ccc(Br)cc3)cc2)cc1   \n184                       O=S(=O)(F)c1cc(Br)ccc1Br   \n185               CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21   \n186                       Fc1c(F)c(Br)c(F)c(Br)c1F   \n187                                 Brc1ccc(Br)nn1   \n\n                   synthesis.synthesis_id synthesis.status  \\\n0    695c1c55-bf6a-4265-b68d-4655999a7b85             DONE   \n1    9a71f775-c341-42b1-ab7a-cd0917b5e80f             DONE   \n2    8cf70e33-a879-4ab7-879f-5284da51c300             DONE   \n3    512b328b-6a19-4f7d-9cc1-a136edc9f344             DONE   \n4    7fbd4503-b19e-4163-9105-ee34b38e4a3e             DONE   \n..                                    ...              ...   \n183  df9ba1a2-f0c5-4489-951e-f340d139696d           FAILED   \n184  3f91627a-3442-43b7-990f-e03c98bb339c             DONE   \n185  54704ed1-b199-48b0-9f0e-7c308e3674ab             DONE   \n186  f0b1d74c-ff37-4bef-93e3-80b4a4dec5b4             DONE   \n187  9123ce18-9114-43cd-b142-822596a4ca59           FAILED   \n\n                    synthesis.molecule_id  \n0    539c5e5e-25fa-457d-a2c0-ecf3f88c36f3  \n1    3275cec5-919c-4f18-bb4c-2ec941f7db3b  \n2    63bd1d6d-3e81-48ae-9535-e04dc6d9d32f  \n3    a5e39076-8b93-40f8-93b0-8b5edc65ef53  \n4    9131832d-c235-4a6a-9183-ed12f0f8ac3e  \n..                                    ...  \n183  25b0ab3f-27bd-4e9b-ae2e-db6dc427cddf  \n184  a9418b76-84b2-48d8-b59a-1e203f694cf7  \n185  505c99a9-46eb-4523-8304-90eda636a8ce  \n186  8905c422-2748-418a-80b9-444cfb4009dd  \n187  a30e4429-b20b-4727-b161-a2d5a2ae01ed  \n\n[188 rows x 12 columns]",
+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product.hid</th>\n      <th>product.smiles</th>\n      <th>product.optical_properties</th>\n      <th>fragment_a.hid</th>\n      <th>fragment_a.smiles</th>\n      <th>fragment_b.hid</th>\n      <th>fragment_b.smiles</th>\n      <th>fragment_c.hid</th>\n      <th>fragment_c.smiles</th>\n      <th>synthesis.synthesis_id</th>\n      <th>synthesis.status</th>\n      <th>synthesis.molecule_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A001B003C001</td>\n      <td>C(=Cc1ccc(-n2c3ccccc3c3ccccc32)cc1)c1ccc(-c2cc...</td>\n      <td>{'PL_lambda_max': 443.6, 'validation_status': ...</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B003</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2</td>\n      <td>C001</td>\n      <td>Brc1ccc(-c2ccc(Br)cc2)cc1</td>\n      <td>695c1c55-bf6a-4265-b68d-4655999a7b85</td>\n      <td>DONE</td>\n      <td>539c5e5e-25fa-457d-a2c0-ecf3f88c36f3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A001B003C002</td>\n      <td>C(=Cc1ccc(-n2c3ccccc3c3ccccc32)cc1)c1ccc(C=Cc2...</td>\n      <td>{'PL_lambda_max': 448.2, 'validation_status': ...</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B003</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2</td>\n      <td>C002</td>\n      <td>Ic1ccc(I)cc1</td>\n      <td>9a71f775-c341-42b1-ab7a-cd0917b5e80f</td>\n      <td>DONE</td>\n      <td>3275cec5-919c-4f18-bb4c-2ec941f7db3b</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A001B003C003</td>\n      <td>Cc1cc(C=Cc2ccc(-n3c4ccccc4c4ccccc43)cc2)c(C)cc...</td>\n      <td>{'PL_lambda_max': 453.6, 'validation_status': ...</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B003</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2</td>\n      <td>C003</td>\n      <td>Cc1cc(Br)c(C)cc1Br</td>\n      <td>8cf70e33-a879-4ab7-879f-5284da51c300</td>\n      <td>DONE</td>\n      <td>63bd1d6d-3e81-48ae-9535-e04dc6d9d32f</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A001B003C004</td>\n      <td>Fc1c(F)c(-c2c(F)c(F)c(C=Cc3ccc(-n4c5ccccc5c5cc...</td>\n      <td>{'PL_lambda_max': 541.1, 'validation_status': ...</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B003</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2</td>\n      <td>C004</td>\n      <td>Fc1c(F)c(-c2c(F)c(F)c(Br)c(F)c2F)c(F)c(F)c1Br</td>\n      <td>512b328b-6a19-4f7d-9cc1-a136edc9f344</td>\n      <td>DONE</td>\n      <td>a5e39076-8b93-40f8-93b0-8b5edc65ef53</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A001B003C005</td>\n      <td>CC1(C)c2cc(C=Cc3ccc(-n4c5ccccc5c5ccccc54)cc3)c...</td>\n      <td>{'PL_lambda_max': 445.1, 'validation_status': ...</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B003</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2</td>\n      <td>C005</td>\n      <td>CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21</td>\n      <td>7fbd4503-b19e-4163-9105-ee34b38e4a3e</td>\n      <td>DONE</td>\n      <td>9131832d-c235-4a6a-9183-ed12f0f8ac3e</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>A016B026C016</td>\n      <td>Cn1cnc2ccc(-c3ncccc3-c3ccc(-c4ccc(-c5ccc(-c6cc...</td>\n      <td>{'job': 'A016B026C016_optics_A016B026C016_4.47...</td>\n      <td>A016</td>\n      <td>Cn1cnc2ccc(B(O)O)cc21</td>\n      <td>B026</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1cccnc1I)OC(=O)C2</td>\n      <td>C016</td>\n      <td>Brc1ccc(-c2ccc(-c3ccc(Br)cc3)cc2)cc1</td>\n      <td>df9ba1a2-f0c5-4489-951e-f340d139696d</td>\n      <td>FAILED</td>\n      <td>25b0ab3f-27bd-4e9b-ae2e-db6dc427cddf</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>A001B001C044</td>\n      <td>O=S(=O)(F)c1cc(C=Cc2ccc(-c3ccc(-n4c5ccccc5c5cc...</td>\n      <td>{'job': 'A001B001C044_optics_A001B001C044_9.91...</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B001</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2</td>\n      <td>C044</td>\n      <td>O=S(=O)(F)c1cc(Br)ccc1Br</td>\n      <td>3f91627a-3442-43b7-990f-e03c98bb339c</td>\n      <td>DONE</td>\n      <td>a9418b76-84b2-48d8-b59a-1e203f694cf7</td>\n    </tr>\n    <tr>\n      <th>185</th>\n      <td>A017B013C005</td>\n      <td>Cn1ccc2cc(-c3ccc(C#N)c(-c4ccc5c(c4)C(C)(C)c4cc...</td>\n      <td>{'job': 'A017B013C005_optics_A017B013C005_3.80...</td>\n      <td>A017</td>\n      <td>Cn1ccc2cc(B(O)O)ccc21</td>\n      <td>B013</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1cc(Br)ccc1C#N)OC(=O)C2</td>\n      <td>C005</td>\n      <td>CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21</td>\n      <td>54704ed1-b199-48b0-9f0e-7c308e3674ab</td>\n      <td>DONE</td>\n      <td>505c99a9-46eb-4523-8304-90eda636a8ce</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>A001B001C014</td>\n      <td>Fc1c(F)c(C=Cc2ccc(-c3ccc(-n4c5ccccc5c5ccccc54)...</td>\n      <td>{'job': 'A001B001C014_optics_A001B001C014_3.86...</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B001</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2</td>\n      <td>C014</td>\n      <td>Fc1c(F)c(Br)c(F)c(Br)c1F</td>\n      <td>f0b1d74c-ff37-4bef-93e3-80b4a4dec5b4</td>\n      <td>DONE</td>\n      <td>8905c422-2748-418a-80b9-444cfb4009dd</td>\n    </tr>\n    <tr>\n      <th>187</th>\n      <td>A014B017C031</td>\n      <td>CN(C)c1ccc(-c2ccc(-c3ccc(-c4ccc(-c5ccc(-c6ccc(...</td>\n      <td>{'validation_status': 'failed synthesis'}</td>\n      <td>A014</td>\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)cc1</td>\n      <td>B017</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1ccc(-c3ccc(Br)s3)s1)OC(=...</td>\n      <td>C031</td>\n      <td>Brc1ccc(Br)nn1</td>\n      <td>9123ce18-9114-43cd-b142-822596a4ca59</td>\n      <td>FAILED</td>\n      <td>a30e4429-b20b-4727-b161-a2d5a2ae01ed</td>\n    </tr>\n  </tbody>\n</table>\n<p>188 rows × 12 columns</p>\n</div>"
      },
-     "execution_count": 5,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "print(previous_syntheses.shape)\n",
-    "previous_syntheses.head()"
+    "previous_syntheses"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 8,
    "id": "05f806f9",
    "metadata": {
     "pycharm": {
@@ -145,17 +145,17 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "NUM IN PROGRESS :  13\n",
+      "NUM IN PROGRESS :  0\n",
       "NUM FINISHED :  188\n",
       "PERCENT DONE 0.115\n"
      ]
     },
     {
      "data": {
-      "text/plain": "      product.hid                                     product.smiles  \\\n13           None  CCCCCCN1c2ccc(-c3ccc(-c4ccc5c(c4)c4ccccc4n5CC)...   \n14           None  CN(C)c1ccc(-c2ccc(-c3csc(C(=O)O)c3-c3ccc(-c4cc...   \n136          None  c1ccc(-c2nc3ccccc3n2-c2ccc(-c3cncc(-c4cc(-c5cn...   \n139          None  CCCCCCN1c2ccc(-c3ccc(-c4ccc5c(ccn5C)c4)s3)cc2S...   \n150  A001B012C005  CC1(C)c2cc(-c3cc(F)cc(-c4ccc(-n5c6ccccc6c6cccc...   \n162  A015B001C028  CN(C)c1ccc(-c2ccc(C=Cc3cc(F)c(C=Cc4ccc(-c5ccc(...   \n190  A012B003C158  CCn1c2ccccc2c2cc(C=Cc3cc(C(=O)OC)c(C=Cc4ccc5c(...   \n191  A015B002C031  CN(C)c1ccc(-c2ccsc2-c2ccc(-c3sccc3-c3ccc(N(C)C...   \n192  A016B004C074  Cc1cc(-c2cccnc2-c2ccc3ncn(C)c3c2)cc(-c2cccnc2-...   \n205  A012B001C003  CCn1c2ccccc2c2cc(-c3ccc(C=Cc4cc(C)c(C=Cc5ccc(-...   \n206  A001B020C005  CC1(C)c2cc(-c3c(F)cccc3-c3ccc(-n4c5ccccc5c5ccc...   \n207  A001B020C003  Cc1cc(-c2c(F)cccc2-c2ccc(-n3c4ccccc4c4ccccc43)...   \n225  A015B028C158  COC(=O)c1cc(-c2cc(-c3ccc(N(C)C)c4ccccc34)no2)o...   \n\n                            product.optical_properties fragment_a.hid  \\\n13                                                  {}           A012   \n14                                                  {}           A015   \n136  {'MS': {'data': [[0, 100.0687, 994.79614257812...           A013   \n139  {'MS': {'data': [[0, 100.076, 2040.015625], [1...           A017   \n150                                                 {}           A001   \n162                                                 {}           A015   \n190                                                 {}           A012   \n191                                                 {}           A015   \n192                                                 {}           A016   \n205                                                 {}           A012   \n206                                                 {}           A001   \n207                                                 {}           A001   \n225                                                 {}           A015   \n\n                                   fragment_a.smiles fragment_b.hid  \\\n13                      CCn1c2ccccc2c2cc(B(O)O)ccc21           B025   \n14          CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12           B025   \n136         OB(O)c1ccc(-n2c(-c3ccccc3)nc3ccccc32)cc1           B005   \n139                            Cn1ccc2cc(B(O)O)ccc21           B025   \n150  CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B012   \n162         CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12           B001   \n190                     CCn1c2ccccc2c2cc(B(O)O)ccc21           B003   \n191         CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12           B002   \n192                            Cn1cnc2ccc(B(O)O)cc21           B004   \n205                     CCn1c2ccccc2c2cc(B(O)O)ccc21           B001   \n206  CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B020   \n207  CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C           B020   \n225         CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12           B028   \n\n                                  fragment_b.smiles fragment_c.hid  \\\n13         C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2           C130   \n14         C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2           C116   \n136       C[N+]12CC(=O)O[B-]1(c1cncc(Br)c1)OC(=O)C2           C154   \n139        C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2           C130   \n150    C[N+]12CC(=O)O[B-]1(c1cc(F)cc(Br)c1)OC(=O)C2           C005   \n162  C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2           C028   \n190            C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2           C158   \n191          C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2           C031   \n192         C[N+]12CC(=O)O[B-]1(c1cccnc1Br)OC(=O)C2           C074   \n205  C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2           C003   \n206      C[N+]12CC(=O)O[B-]1(c1c(F)cccc1Br)OC(=O)C2           C005   \n207      C[N+]12CC(=O)O[B-]1(c1c(F)cccc1Br)OC(=O)C2           C003   \n225        C[N+]12CC(=O)O[B-]1(c1cc(Br)no1)OC(=O)C2           C158   \n\n                      fragment_c.smiles                synthesis.synthesis_id  \\\n13   CCCCCCN1c2ccc(Br)cc2Sc2cc(Br)ccc21  8cf4e82b-6075-460d-a2ad-cb492f4c4b93   \n14                  O=C(O)c1scc(Br)c1Br  43283ee2-6110-4460-aa57-08cedd716cbd   \n136    Brc1cc(Br)cc(N2CCC3(CC2)OCCO3)c1  c74040cf-8e5f-4f3f-8e06-e77363663672   \n139  CCCCCCN1c2ccc(Br)cc2Sc2cc(Br)ccc21  649fe653-970e-4b7e-9571-c944032aef39   \n150    CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21  5e6ce632-3571-46ba-b25c-718274b3dd05   \n162                  Fc1cc(Br)c(F)cc1Br  936d4d55-a669-48ed-a5ec-c41300c7ff64   \n190                COC(=O)c1cc(Br)oc1Br  05f4ee39-f0b8-4b5f-969e-4fcdb07da878   \n191                      Brc1ccc(Br)nn1  fecae425-531a-478e-ab03-9f7ff26cca24   \n192                  Cc1cc(Br)cc(Br)c1O  c6191dcf-5f49-4a66-836b-b8474a14c269   \n205                  Cc1cc(Br)c(C)cc1Br  7809efa1-062f-4b61-a410-083cf01a29ad   \n206    CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21  1d211a94-d351-47e0-b976-87aadb957eb6   \n207                  Cc1cc(Br)c(C)cc1Br  048f2bd1-8c80-4069-86b6-26311ae4f1ca   \n225                COC(=O)c1cc(Br)oc1Br  becaa60f-c923-4ac0-a4e3-0c31e333a12a   \n\n    synthesis.status                 synthesis.molecule_id  \n13        PROCESSING  b33b1cc9-81d8-4833-803f-466411581a4d  \n14          RECEIVED  322b8304-39b5-49bc-a307-99719f0d5911  \n136      SYNTHESIZED  036ef848-5792-4501-b904-63301e6f1027  \n139         RECEIVED  416db1b2-15d6-4a2b-b2d2-a0e688f0dce4  \n150         ACQUIRED  c08b6d18-3a1d-4b8a-91e8-ec7fa281cf8e  \n162         ACQUIRED  f336bff6-b429-4d4b-9202-af690e1eacc1  \n190         ACQUIRED  d77e729b-2284-4282-b2c4-78e55928364b  \n191         ACQUIRED  5a14f557-6ba2-4afe-b48a-4a56040822f4  \n192         ACQUIRED  57427931-f0bc-4b77-98e8-1959255f7c4c  \n205         ACQUIRED  8ac8aa07-c5cd-4334-9c63-983b5a4a50d1  \n206         ACQUIRED  f02fc641-b6fc-4e17-bf8d-7a4a405b9035  \n207         ACQUIRED  d19b4245-7ed6-4d41-8bb9-eaa29a3e5e3e  \n225         ACQUIRED  bbec210f-bf95-4f0c-8cb6-323d88c1c52d  ",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product.hid</th>\n      <th>product.smiles</th>\n      <th>product.optical_properties</th>\n      <th>fragment_a.hid</th>\n      <th>fragment_a.smiles</th>\n      <th>fragment_b.hid</th>\n      <th>fragment_b.smiles</th>\n      <th>fragment_c.hid</th>\n      <th>fragment_c.smiles</th>\n      <th>synthesis.synthesis_id</th>\n      <th>synthesis.status</th>\n      <th>synthesis.molecule_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>13</th>\n      <td>None</td>\n      <td>CCCCCCN1c2ccc(-c3ccc(-c4ccc5c(c4)c4ccccc4n5CC)...</td>\n      <td>{}</td>\n      <td>A012</td>\n      <td>CCn1c2ccccc2c2cc(B(O)O)ccc21</td>\n      <td>B025</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2</td>\n      <td>C130</td>\n      <td>CCCCCCN1c2ccc(Br)cc2Sc2cc(Br)ccc21</td>\n      <td>8cf4e82b-6075-460d-a2ad-cb492f4c4b93</td>\n      <td>PROCESSING</td>\n      <td>b33b1cc9-81d8-4833-803f-466411581a4d</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>None</td>\n      <td>CN(C)c1ccc(-c2ccc(-c3csc(C(=O)O)c3-c3ccc(-c4cc...</td>\n      <td>{}</td>\n      <td>A015</td>\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12</td>\n      <td>B025</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2</td>\n      <td>C116</td>\n      <td>O=C(O)c1scc(Br)c1Br</td>\n      <td>43283ee2-6110-4460-aa57-08cedd716cbd</td>\n      <td>RECEIVED</td>\n      <td>322b8304-39b5-49bc-a307-99719f0d5911</td>\n    </tr>\n    <tr>\n      <th>136</th>\n      <td>None</td>\n      <td>c1ccc(-c2nc3ccccc3n2-c2ccc(-c3cncc(-c4cc(-c5cn...</td>\n      <td>{'MS': {'data': [[0, 100.0687, 994.79614257812...</td>\n      <td>A013</td>\n      <td>OB(O)c1ccc(-n2c(-c3ccccc3)nc3ccccc32)cc1</td>\n      <td>B005</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1cncc(Br)c1)OC(=O)C2</td>\n      <td>C154</td>\n      <td>Brc1cc(Br)cc(N2CCC3(CC2)OCCO3)c1</td>\n      <td>c74040cf-8e5f-4f3f-8e06-e77363663672</td>\n      <td>SYNTHESIZED</td>\n      <td>036ef848-5792-4501-b904-63301e6f1027</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>None</td>\n      <td>CCCCCCN1c2ccc(-c3ccc(-c4ccc5c(ccn5C)c4)s3)cc2S...</td>\n      <td>{'MS': {'data': [[0, 100.076, 2040.015625], [1...</td>\n      <td>A017</td>\n      <td>Cn1ccc2cc(B(O)O)ccc21</td>\n      <td>B025</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1ccc(Br)s1)OC(=O)C2</td>\n      <td>C130</td>\n      <td>CCCCCCN1c2ccc(Br)cc2Sc2cc(Br)ccc21</td>\n      <td>649fe653-970e-4b7e-9571-c944032aef39</td>\n      <td>RECEIVED</td>\n      <td>416db1b2-15d6-4a2b-b2d2-a0e688f0dce4</td>\n    </tr>\n    <tr>\n      <th>150</th>\n      <td>A001B012C005</td>\n      <td>CC1(C)c2cc(-c3cc(F)cc(-c4ccc(-n5c6ccccc6c6cccc...</td>\n      <td>{}</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B012</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1cc(F)cc(Br)c1)OC(=O)C2</td>\n      <td>C005</td>\n      <td>CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21</td>\n      <td>5e6ce632-3571-46ba-b25c-718274b3dd05</td>\n      <td>ACQUIRED</td>\n      <td>c08b6d18-3a1d-4b8a-91e8-ec7fa281cf8e</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>A015B001C028</td>\n      <td>CN(C)c1ccc(-c2ccc(C=Cc3cc(F)c(C=Cc4ccc(-c5ccc(...</td>\n      <td>{}</td>\n      <td>A015</td>\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12</td>\n      <td>B001</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2</td>\n      <td>C028</td>\n      <td>Fc1cc(Br)c(F)cc1Br</td>\n      <td>936d4d55-a669-48ed-a5ec-c41300c7ff64</td>\n      <td>ACQUIRED</td>\n      <td>f336bff6-b429-4d4b-9202-af690e1eacc1</td>\n    </tr>\n    <tr>\n      <th>190</th>\n      <td>A012B003C158</td>\n      <td>CCn1c2ccccc2c2cc(C=Cc3cc(C(=O)OC)c(C=Cc4ccc5c(...</td>\n      <td>{}</td>\n      <td>A012</td>\n      <td>CCn1c2ccccc2c2cc(B(O)O)ccc21</td>\n      <td>B003</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/Br)OC(=O)C2</td>\n      <td>C158</td>\n      <td>COC(=O)c1cc(Br)oc1Br</td>\n      <td>05f4ee39-f0b8-4b5f-969e-4fcdb07da878</td>\n      <td>ACQUIRED</td>\n      <td>d77e729b-2284-4282-b2c4-78e55928364b</td>\n    </tr>\n    <tr>\n      <th>191</th>\n      <td>A015B002C031</td>\n      <td>CN(C)c1ccc(-c2ccsc2-c2ccc(-c3sccc3-c3ccc(N(C)C...</td>\n      <td>{}</td>\n      <td>A015</td>\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12</td>\n      <td>B002</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1sccc1Br)OC(=O)C2</td>\n      <td>C031</td>\n      <td>Brc1ccc(Br)nn1</td>\n      <td>fecae425-531a-478e-ab03-9f7ff26cca24</td>\n      <td>ACQUIRED</td>\n      <td>5a14f557-6ba2-4afe-b48a-4a56040822f4</td>\n    </tr>\n    <tr>\n      <th>192</th>\n      <td>A016B004C074</td>\n      <td>Cc1cc(-c2cccnc2-c2ccc3ncn(C)c3c2)cc(-c2cccnc2-...</td>\n      <td>{}</td>\n      <td>A016</td>\n      <td>Cn1cnc2ccc(B(O)O)cc21</td>\n      <td>B004</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1cccnc1Br)OC(=O)C2</td>\n      <td>C074</td>\n      <td>Cc1cc(Br)cc(Br)c1O</td>\n      <td>c6191dcf-5f49-4a66-836b-b8474a14c269</td>\n      <td>ACQUIRED</td>\n      <td>57427931-f0bc-4b77-98e8-1959255f7c4c</td>\n    </tr>\n    <tr>\n      <th>205</th>\n      <td>A012B001C003</td>\n      <td>CCn1c2ccccc2c2cc(-c3ccc(C=Cc4cc(C)c(C=Cc5ccc(-...</td>\n      <td>{}</td>\n      <td>A012</td>\n      <td>CCn1c2ccccc2c2cc(B(O)O)ccc21</td>\n      <td>B001</td>\n      <td>C[N+]12CC(=O)O[B-]1(/C=C/c1ccc(Br)cc1)OC(=O)C2</td>\n      <td>C003</td>\n      <td>Cc1cc(Br)c(C)cc1Br</td>\n      <td>7809efa1-062f-4b61-a410-083cf01a29ad</td>\n      <td>ACQUIRED</td>\n      <td>8ac8aa07-c5cd-4334-9c63-983b5a4a50d1</td>\n    </tr>\n    <tr>\n      <th>206</th>\n      <td>A001B020C005</td>\n      <td>CC1(C)c2cc(-c3c(F)cccc3-c3ccc(-n4c5ccccc5c5ccc...</td>\n      <td>{}</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B020</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1c(F)cccc1Br)OC(=O)C2</td>\n      <td>C005</td>\n      <td>CC1(C)c2cc(Br)ccc2-c2ccc(Br)cc21</td>\n      <td>1d211a94-d351-47e0-b976-87aadb957eb6</td>\n      <td>ACQUIRED</td>\n      <td>f02fc641-b6fc-4e17-bf8d-7a4a405b9035</td>\n    </tr>\n    <tr>\n      <th>207</th>\n      <td>A001B020C003</td>\n      <td>Cc1cc(-c2c(F)cccc2-c2ccc(-n3c4ccccc4c4ccccc43)...</td>\n      <td>{}</td>\n      <td>A001</td>\n      <td>CC1(C)OB(c2ccc(-n3c4ccccc4c4ccccc43)cc2)OC1(C)C</td>\n      <td>B020</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1c(F)cccc1Br)OC(=O)C2</td>\n      <td>C003</td>\n      <td>Cc1cc(Br)c(C)cc1Br</td>\n      <td>048f2bd1-8c80-4069-86b6-26311ae4f1ca</td>\n      <td>ACQUIRED</td>\n      <td>d19b4245-7ed6-4d41-8bb9-eaa29a3e5e3e</td>\n    </tr>\n    <tr>\n      <th>225</th>\n      <td>A015B028C158</td>\n      <td>COC(=O)c1cc(-c2cc(-c3ccc(N(C)C)c4ccccc34)no2)o...</td>\n      <td>{}</td>\n      <td>A015</td>\n      <td>CN(C)c1ccc(B2OC(C)(C)C(C)(C)O2)c2ccccc12</td>\n      <td>B028</td>\n      <td>C[N+]12CC(=O)O[B-]1(c1cc(Br)no1)OC(=O)C2</td>\n      <td>C158</td>\n      <td>COC(=O)c1cc(Br)oc1Br</td>\n      <td>becaa60f-c923-4ac0-a4e3-0c31e333a12a</td>\n      <td>ACQUIRED</td>\n      <td>bbec210f-bf95-4f0c-8cb6-323d88c1c52d</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
+      "text/plain": "Empty DataFrame\nColumns: [product.hid, product.smiles, product.optical_properties, fragment_a.hid, fragment_a.smiles, fragment_b.hid, fragment_b.smiles, fragment_c.hid, fragment_c.smiles, synthesis.synthesis_id, synthesis.status, synthesis.molecule_id]\nIndex: []",
+      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>product.hid</th>\n      <th>product.smiles</th>\n      <th>product.optical_properties</th>\n      <th>fragment_a.hid</th>\n      <th>fragment_a.smiles</th>\n      <th>fragment_b.hid</th>\n      <th>fragment_b.smiles</th>\n      <th>fragment_c.hid</th>\n      <th>fragment_c.smiles</th>\n      <th>synthesis.synthesis_id</th>\n      <th>synthesis.status</th>\n      <th>synthesis.molecule_id</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>"
      },
-     "execution_count": 6,
+     "execution_count": 8,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -177,7 +177,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 15,
    "id": "87857491",
    "metadata": {
     "pycharm": {
@@ -216,7 +216,7 @@
     "\n",
     "        observations.append(\n",
     "            {\n",
-    "                'fragment': row[\"fragment_a.hid\"],\n",
+    "                'fragment_a': row[\"fragment_a.hid\"],\n",
     "                'fragment_b': row[\"fragment_b.hid\"],\n",
     "                'fragment_c': row[\"fragment_c.hid\"],\n",
     "                'obj': gain_cross_section\n",
@@ -247,7 +247,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 16,
    "id": "58c31a09",
    "metadata": {
     "pycharm": {
@@ -257,9 +257,9 @@
    "outputs": [
     {
      "data": {
-      "text/plain": "[None,\n None,\n None,\n None,\n 'A001B012C005',\n 'A015B001C028',\n 'A012B003C158',\n 'A015B002C031',\n 'A016B004C074',\n 'A012B001C003',\n 'A001B020C005',\n 'A001B020C003',\n 'A015B028C158']"
+      "text/plain": "[]"
      },
-     "execution_count": 8,
+     "execution_count": 16,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -273,7 +273,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 17,
    "id": "de320377",
    "metadata": {
     "pycharm": {
@@ -283,9 +283,9 @@
    "outputs": [
     {
      "data": {
-      "text/plain": "[{'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C001', 'obj': 1.869e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C002', 'obj': 1.968e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C003', 'obj': 2.309e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C004', 'obj': 6.72e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B003',\n  'frag_c': 'C005',\n  'obj': 2.6859999999999997e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C006', 'obj': 1.19e-17},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C008', 'obj': 1.89e-17},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C011', 'obj': 2.442e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C015', 'obj': 2.63e-17},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C017', 'obj': 1.212e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C018', 'obj': 1.649e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B003',\n  'frag_c': 'C019',\n  'obj': 9.330000000000001e-17},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C021', 'obj': 1.421e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B003',\n  'frag_c': 'C024',\n  'obj': 9.619999999999999e-17},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C028', 'obj': 1.462e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B003',\n  'frag_c': 'C030',\n  'obj': 1.2490000000000002e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C033', 'obj': 1.5e-18},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C032', 'obj': 1.177e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C034', 'obj': 2.13e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B003',\n  'frag_c': 'C037',\n  'obj': 5.739999999999999e-17},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C039', 'obj': 6.89e-17},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C040', 'obj': 6.57e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C001',\n  'obj': 1.8870226199561358e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C004',\n  'obj': 9.538077329332945e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C002',\n  'obj': 2.839195275716423e-16},\n {'frag_a': 'A001', 'frag_b': 'B024', 'frag_c': 'C042', 'obj': nan},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C007', 'obj': 2.669e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C010', 'obj': 1.925e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B003',\n  'frag_c': 'C012',\n  'obj': 1.0249999999999999e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C013', 'obj': 6.35e-17},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C020', 'obj': 2.021e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B003',\n  'frag_c': 'C022',\n  'obj': 1.0949999999999999e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B003',\n  'frag_c': 'C023',\n  'obj': 1.0429999999999999e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C027', 'obj': 1.159e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C029', 'obj': 2.108e-16},\n {'frag_a': 'A001', 'frag_b': 'B003', 'frag_c': 'C035', 'obj': 2.98e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C002',\n  'obj': 7.799349032872396e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C003',\n  'obj': 1.1411368497993406e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C001',\n  'obj': 1.6663578688743284e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C003',\n  'obj': 3.1948201629442367e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C004',\n  'obj': 4.7901330144404335e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C005',\n  'obj': 3.135808244483309e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C006',\n  'obj': 1.689465788881972e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C008',\n  'obj': 3.0358494982642504e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C010',\n  'obj': 8.019337116721302e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C007',\n  'obj': 1.833494300540071e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C007',\n  'obj': 1.764808735613602e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C009',\n  'obj': 8.782873926807519e-17},\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C005', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C006',\n  'obj': 1.5796210254473297e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C008',\n  'obj': 2.564931620759565e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C009',\n  'obj': 2.783403255397691e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C010',\n  'obj': 1.4350151858010136e-16},\n {'frag_a': 'A001', 'frag_b': 'B024', 'frag_c': 'C012', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C020',\n  'obj': 2.1126617779616634e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C013',\n  'obj': 5.4898487710362706e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C014',\n  'obj': 8.27039807268337e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C016',\n  'obj': 5.020111342447057e-18},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C017',\n  'obj': 3.389972606091482e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C015',\n  'obj': 6.101046643898326e-17},\n {'frag_a': 'A001', 'frag_b': 'B024', 'frag_c': 'C013', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C012',\n  'obj': 1.0391874034650129e-16},\n {'frag_a': 'A017', 'frag_b': 'B012', 'frag_c': 'C014', 'obj': nan},\n {'frag_a': 'A012',\n  'frag_b': 'B006',\n  'frag_c': 'C017',\n  'obj': 7.830060269642066e-17},\n {'frag_a': 'A012',\n  'frag_b': 'B025',\n  'frag_c': 'C007',\n  'obj': 6.0148947648980065e-18},\n {'frag_a': 'A014',\n  'frag_b': 'B021',\n  'frag_c': 'C026',\n  'obj': 4.3830299289320585e-18},\n {'frag_a': 'A014', 'frag_b': 'B017', 'frag_c': 'C027', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C015',\n  'obj': 9.826850946704687e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C016',\n  'obj': 1.545974068292758e-17},\n {'frag_a': 'A015', 'frag_b': 'B016', 'frag_c': 'C020', 'obj': nan},\n {'frag_a': 'A017', 'frag_b': 'B016', 'frag_c': 'C034', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C018',\n  'obj': 1.2738719012641579e-17},\n {'frag_a': 'A004', 'frag_b': 'B026', 'frag_c': 'C013', 'obj': nan},\n {'frag_a': 'A016', 'frag_b': 'B011', 'frag_c': 'C032', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C017',\n  'obj': 6.08174462298923e-18},\n {'frag_a': 'A016', 'frag_b': 'B016', 'frag_c': 'C030', 'obj': nan},\n {'frag_a': 'A014', 'frag_b': 'B017', 'frag_c': 'C004', 'obj': nan},\n {'frag_a': 'A014', 'frag_b': 'B021', 'frag_c': 'C014', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C019',\n  'obj': 2.273971941204006e-17},\n {'frag_a': 'A014',\n  'frag_b': 'B014',\n  'frag_c': 'C027',\n  'obj': 3.694213515548072e-17},\n {'frag_a': 'A014', 'frag_b': 'B013', 'frag_c': 'C017', 'obj': nan},\n {'frag_a': 'A015',\n  'frag_b': 'B026',\n  'frag_c': 'C039',\n  'obj': 3.78925555720498e-18},\n {'frag_a': 'A017',\n  'frag_b': 'B024',\n  'frag_c': 'C027',\n  'obj': 1.0246242686484186e-16},\n {'frag_a': 'A014',\n  'frag_b': 'B024',\n  'frag_c': 'C034',\n  'obj': 5.261111543826998e-18},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C021',\n  'obj': 5.774149693561629e-17},\n {'frag_a': 'A014', 'frag_b': 'B014', 'frag_c': 'C022', 'obj': nan},\n {'frag_a': 'A014',\n  'frag_b': 'B025',\n  'frag_c': 'C027',\n  'obj': 3.7577682225114775e-18},\n {'frag_a': 'A012',\n  'frag_b': 'B014',\n  'frag_c': 'C007',\n  'obj': 1.18646011743689e-16},\n {'frag_a': 'A002',\n  'frag_b': 'B021',\n  'frag_c': 'C039',\n  'obj': 4.237611907237047e-17},\n {'frag_a': 'A010', 'frag_b': 'B026', 'frag_c': 'C032', 'obj': nan},\n {'frag_a': 'A002', 'frag_b': 'B021', 'frag_c': 'C004', 'obj': nan},\n {'frag_a': 'A016', 'frag_b': 'B022', 'frag_c': 'C043', 'obj': nan},\n {'frag_a': 'A014', 'frag_b': 'B016', 'frag_c': 'C042', 'obj': nan},\n {'frag_a': 'A010', 'frag_b': 'B011', 'frag_c': 'C004', 'obj': nan},\n {'frag_a': 'A014', 'frag_b': 'B017', 'frag_c': 'C026', 'obj': nan},\n {'frag_a': 'A017', 'frag_b': 'B017', 'frag_c': 'C027', 'obj': nan},\n {'frag_a': 'A002',\n  'frag_b': 'B026',\n  'frag_c': 'C013',\n  'obj': 8.359460322246241e-17},\n {'frag_a': 'A014', 'frag_b': 'B016', 'frag_c': 'C011', 'obj': nan},\n {'frag_a': 'A002', 'frag_b': 'B011', 'frag_c': 'C039', 'obj': nan},\n {'frag_a': 'A014',\n  'frag_b': 'B012',\n  'frag_c': 'C004',\n  'obj': 4.651911176165383e-17},\n {'frag_a': 'A016',\n  'frag_b': 'B024',\n  'frag_c': 'C032',\n  'obj': 6.738964119838765e-18},\n {'frag_a': 'A014',\n  'frag_b': 'B006',\n  'frag_c': 'C005',\n  'obj': 6.679155177965171e-17},\n {'frag_a': 'A016', 'frag_b': 'B026', 'frag_c': 'C017', 'obj': nan},\n {'frag_a': 'A017',\n  'frag_b': 'B024',\n  'frag_c': 'C034',\n  'obj': 1.4131711981022327e-17},\n {'frag_a': 'A015', 'frag_b': 'B010', 'frag_c': 'C014', 'obj': nan},\n {'frag_a': 'A014', 'frag_b': 'B013', 'frag_c': 'C005', 'obj': nan},\n {'frag_a': 'A014', 'frag_b': 'B024', 'frag_c': 'C007', 'obj': nan},\n {'frag_a': 'A014',\n  'frag_b': 'B006',\n  'frag_c': 'C014',\n  'obj': 6.525903364971338e-18},\n {'frag_a': 'A017', 'frag_b': 'B024', 'frag_c': 'C023', 'obj': nan},\n {'frag_a': 'A014', 'frag_b': 'B002', 'frag_c': 'C013', 'obj': nan},\n {'frag_a': 'A016', 'frag_b': 'B005', 'frag_c': 'C032', 'obj': nan},\n {'frag_a': 'A007', 'frag_b': 'B026', 'frag_c': 'C032', 'obj': nan},\n {'frag_a': 'A017',\n  'frag_b': 'B024',\n  'frag_c': 'C022',\n  'obj': 1.3451843195023162e-17},\n {'frag_a': 'A011', 'frag_b': 'B007', 'frag_c': 'C027', 'obj': nan},\n {'frag_a': 'A017',\n  'frag_b': 'B007',\n  'frag_c': 'C015',\n  'obj': 9.206727195235754e-18},\n {'frag_a': 'A014',\n  'frag_b': 'B006',\n  'frag_c': 'C013',\n  'obj': 7.923815265915032e-18},\n {'frag_a': 'A002', 'frag_b': 'B007', 'frag_c': 'C025', 'obj': nan},\n {'frag_a': 'A032', 'frag_b': 'B016', 'frag_c': 'C025', 'obj': nan},\n {'frag_a': 'A002', 'frag_b': 'B016', 'frag_c': 'C025', 'obj': nan},\n {'frag_a': 'A015',\n  'frag_b': 'B023',\n  'frag_c': 'C036',\n  'obj': 1.754540316783665e-17},\n {'frag_a': 'A015', 'frag_b': 'B020', 'frag_c': 'C036', 'obj': nan},\n {'frag_a': 'A012',\n  'frag_b': 'B011',\n  'frag_c': 'C011',\n  'obj': 6.40921915834097e-17},\n {'frag_a': 'A015',\n  'frag_b': 'B002',\n  'frag_c': 'C041',\n  'obj': 5.730015594568486e-19},\n {'frag_a': 'A012',\n  'frag_b': 'B007',\n  'frag_c': 'C001',\n  'obj': 9.244598780085763e-17},\n {'frag_a': 'A012',\n  'frag_b': 'B009',\n  'frag_c': 'C010',\n  'obj': 6.846003907017119e-17},\n {'frag_a': 'A001', 'frag_b': 'B006', 'frag_c': 'C014', 'obj': nan},\n {'frag_a': 'A001', 'frag_b': 'B023', 'frag_c': 'C042', 'obj': nan},\n {'frag_a': 'A011',\n  'frag_b': 'B006',\n  'frag_c': 'C007',\n  'obj': 7.731345439360771e-17},\n {'frag_a': 'A016', 'frag_b': 'B011', 'frag_c': 'C017', 'obj': nan},\n {'frag_a': 'A015',\n  'frag_b': 'B001',\n  'frag_c': 'C014',\n  'obj': 2.523547276948713e-17},\n {'frag_a': 'A012',\n  'frag_b': 'B016',\n  'frag_c': 'C025',\n  'obj': 1.00314069049024e-16},\n {'frag_a': 'A017',\n  'frag_b': 'B012',\n  'frag_c': 'C026',\n  'obj': 4.950532097586806e-18},\n {'frag_a': 'A010',\n  'frag_b': 'B010',\n  'frag_c': 'C020',\n  'obj': 1.0083667809612752e-17},\n {'frag_a': 'A016', 'frag_b': 'B021', 'frag_c': 'C006', 'obj': nan},\n {'frag_a': 'A010', 'frag_b': 'B015', 'frag_c': 'C058', 'obj': nan},\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C026', 'obj': nan},\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C043', 'obj': nan},\n {'frag_a': 'A014',\n  'frag_b': 'B008',\n  'frag_c': 'C022',\n  'obj': 6.112709672620424e-18},\n {'frag_a': 'A011',\n  'frag_b': 'B022',\n  'frag_c': 'C043',\n  'obj': 2.9033219264089226e-17},\n {'frag_a': 'A032',\n  'frag_b': 'B022',\n  'frag_c': 'C034',\n  'obj': 3.303392062973488e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C026',\n  'obj': 5.533548486096295e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C023',\n  'obj': 8.889847034437943e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C024',\n  'obj': 1.4220443754121085e-16},\n {'frag_a': 'A002',\n  'frag_b': 'B026',\n  'frag_c': 'C035',\n  'obj': 4.201224852544019e-17},\n {'frag_a': 'A011',\n  'frag_b': 'B016',\n  'frag_c': 'C025',\n  'obj': 1.0106786073004218e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B018',\n  'frag_c': 'C032',\n  'obj': 5.693911247335016e-17},\n {'frag_a': 'A017',\n  'frag_b': 'B002',\n  'frag_c': 'C032',\n  'obj': 1.0966663481608477e-17},\n {'frag_a': 'A012',\n  'frag_b': 'B002',\n  'frag_c': 'C041',\n  'obj': 2.921517766345191e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B007',\n  'frag_c': 'C006',\n  'obj': 9.004995950322481e-18},\n {'frag_a': 'A011',\n  'frag_b': 'B016',\n  'frag_c': 'C036',\n  'obj': 8.765202846540386e-17},\n {'frag_a': 'A017',\n  'frag_b': 'B018',\n  'frag_c': 'C023',\n  'obj': 1.5526620557867162e-17},\n {'frag_a': 'A016',\n  'frag_b': 'B019',\n  'frag_c': 'C058',\n  'obj': 8.19820155674067e-17},\n {'frag_a': 'A015',\n  'frag_b': 'B008',\n  'frag_c': 'C036',\n  'obj': 4.6124037317905746e-18},\n {'frag_a': 'A002', 'frag_b': 'B004', 'frag_c': 'C042', 'obj': nan},\n {'frag_a': 'A011', 'frag_b': 'B001', 'frag_c': 'C043', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C028',\n  'obj': 1.4483124197741937e-16},\n {'frag_a': 'A017',\n  'frag_b': 'B025',\n  'frag_c': 'C032',\n  'obj': 1.2990177468957796e-16},\n {'frag_a': 'A001', 'frag_b': 'B024', 'frag_c': 'C022', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C025',\n  'obj': 1.0523847768248343e-16},\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C022', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C043',\n  'obj': 7.808046333127821e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C024',\n  'obj': 6.468748207729169e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C018',\n  'obj': 2.09633619724748e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C019',\n  'obj': 8.236931948493235e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C023',\n  'obj': 1.2548463592385985e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C020',\n  'obj': 2.1298908476023633e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C021',\n  'obj': 1.4618306676436623e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C025',\n  'obj': 1.189922738375221e-16},\n {'frag_a': 'A001',\n  'frag_b': 'B024',\n  'frag_c': 'C028',\n  'obj': 1.281002844906603e-16},\n {'frag_a': 'A001', 'frag_b': 'B001', 'frag_c': 'C011', 'obj': nan},\n {'frag_a': 'A032', 'frag_b': 'B020', 'frag_c': 'C037', 'obj': nan},\n {'frag_a': 'A017', 'frag_b': 'B023', 'frag_c': 'C032', 'obj': nan},\n {'frag_a': 'A010', 'frag_b': 'B004', 'frag_c': 'C042', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C030',\n  'obj': 4.384016890595388e-17},\n {'frag_a': 'A014', 'frag_b': 'B002', 'frag_c': 'C017', 'obj': nan},\n {'frag_a': 'A014',\n  'frag_b': 'B020',\n  'frag_c': 'C027',\n  'obj': 1.0739333166057634e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B013',\n  'frag_c': 'C018',\n  'obj': 3.967021469424605e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B022',\n  'frag_c': 'C025',\n  'obj': 8.580904666671667e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C042',\n  'obj': 1.5779875470119115e-16},\n {'frag_a': 'A015', 'frag_b': 'B022', 'frag_c': 'C010', 'obj': nan},\n {'frag_a': 'A011', 'frag_b': 'B008', 'frag_c': 'C020', 'obj': nan},\n {'frag_a': 'A016', 'frag_b': 'B017', 'frag_c': 'C043', 'obj': nan},\n {'frag_a': 'A016', 'frag_b': 'B018', 'frag_c': 'C017', 'obj': nan},\n {'frag_a': 'A016', 'frag_b': 'B026', 'frag_c': 'C016', 'obj': nan},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C044',\n  'obj': 1.5754107488570007e-16},\n {'frag_a': 'A017',\n  'frag_b': 'B013',\n  'frag_c': 'C005',\n  'obj': 1.5061609372299598e-17},\n {'frag_a': 'A001',\n  'frag_b': 'B001',\n  'frag_c': 'C014',\n  'obj': 3.0894372345716633e-17},\n {'frag_a': 'A014', 'frag_b': 'B017', 'frag_c': 'C031', 'obj': nan}]"
+      "text/plain": "[{'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C001',\n  'obj': 1.869e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C002',\n  'obj': 1.968e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C003',\n  'obj': 2.309e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C004',\n  'obj': 6.72e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C005',\n  'obj': 2.6859999999999997e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C006',\n  'obj': 1.19e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C008',\n  'obj': 1.89e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C011',\n  'obj': 2.442e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C015',\n  'obj': 2.63e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C017',\n  'obj': 1.212e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C018',\n  'obj': 1.649e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C019',\n  'obj': 9.330000000000001e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C021',\n  'obj': 1.421e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C024',\n  'obj': 9.619999999999999e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C028',\n  'obj': 1.462e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C030',\n  'obj': 1.2490000000000002e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C033',\n  'obj': 1.5e-18},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C032',\n  'obj': 1.177e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C034',\n  'obj': 2.13e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C037',\n  'obj': 5.739999999999999e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C039',\n  'obj': 6.89e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C040',\n  'obj': 6.57e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C001',\n  'obj': 1.8870226199561358e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C004',\n  'obj': 9.538077329332945e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C002',\n  'obj': 2.839195275716423e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C042',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C007',\n  'obj': 2.669e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C010',\n  'obj': 1.925e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C012',\n  'obj': 1.0249999999999999e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C013',\n  'obj': 6.35e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C020',\n  'obj': 2.021e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C022',\n  'obj': 1.0949999999999999e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C023',\n  'obj': 1.0429999999999999e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C027',\n  'obj': 1.159e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C029',\n  'obj': 2.108e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B003',\n  'fragment_c': 'C035',\n  'obj': 2.98e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C002',\n  'obj': 7.799349032872396e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C003',\n  'obj': 1.1411368497993406e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C001',\n  'obj': 1.6663578688743284e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C003',\n  'obj': 3.1948201629442367e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C004',\n  'obj': 4.7901330144404335e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C005',\n  'obj': 3.135808244483309e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C006',\n  'obj': 1.689465788881972e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C008',\n  'obj': 3.0358494982642504e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C010',\n  'obj': 8.019337116721302e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C007',\n  'obj': 1.833494300540071e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C007',\n  'obj': 1.764808735613602e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C009',\n  'obj': 8.782873926807519e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C005',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C006',\n  'obj': 1.5796210254473297e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C008',\n  'obj': 2.564931620759565e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C009',\n  'obj': 2.783403255397691e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C010',\n  'obj': 1.4350151858010136e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C012',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C020',\n  'obj': 2.1126617779616634e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C013',\n  'obj': 5.4898487710362706e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C014',\n  'obj': 8.27039807268337e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C016',\n  'obj': 5.020111342447057e-18},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C017',\n  'obj': 3.389972606091482e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C015',\n  'obj': 6.101046643898326e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C013',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C012',\n  'obj': 1.0391874034650129e-16},\n {'fragment_a': 'A017',\n  'fragment_b': 'B012',\n  'fragment_c': 'C014',\n  'obj': nan},\n {'fragment_a': 'A012',\n  'fragment_b': 'B006',\n  'fragment_c': 'C017',\n  'obj': 7.830060269642066e-17},\n {'fragment_a': 'A012',\n  'fragment_b': 'B025',\n  'fragment_c': 'C007',\n  'obj': 6.0148947648980065e-18},\n {'fragment_a': 'A014',\n  'fragment_b': 'B021',\n  'fragment_c': 'C026',\n  'obj': 4.3830299289320585e-18},\n {'fragment_a': 'A014',\n  'fragment_b': 'B017',\n  'fragment_c': 'C027',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C015',\n  'obj': 9.826850946704687e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C016',\n  'obj': 1.545974068292758e-17},\n {'fragment_a': 'A015',\n  'fragment_b': 'B016',\n  'fragment_c': 'C020',\n  'obj': nan},\n {'fragment_a': 'A017',\n  'fragment_b': 'B016',\n  'fragment_c': 'C034',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C018',\n  'obj': 1.2738719012641579e-17},\n {'fragment_a': 'A004',\n  'fragment_b': 'B026',\n  'fragment_c': 'C013',\n  'obj': nan},\n {'fragment_a': 'A016',\n  'fragment_b': 'B011',\n  'fragment_c': 'C032',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C017',\n  'obj': 6.08174462298923e-18},\n {'fragment_a': 'A016',\n  'fragment_b': 'B016',\n  'fragment_c': 'C030',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B017',\n  'fragment_c': 'C004',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B021',\n  'fragment_c': 'C014',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C019',\n  'obj': 2.273971941204006e-17},\n {'fragment_a': 'A014',\n  'fragment_b': 'B014',\n  'fragment_c': 'C027',\n  'obj': 3.694213515548072e-17},\n {'fragment_a': 'A014',\n  'fragment_b': 'B013',\n  'fragment_c': 'C017',\n  'obj': nan},\n {'fragment_a': 'A015',\n  'fragment_b': 'B026',\n  'fragment_c': 'C039',\n  'obj': 3.78925555720498e-18},\n {'fragment_a': 'A017',\n  'fragment_b': 'B024',\n  'fragment_c': 'C027',\n  'obj': 1.0246242686484186e-16},\n {'fragment_a': 'A014',\n  'fragment_b': 'B024',\n  'fragment_c': 'C034',\n  'obj': 5.261111543826998e-18},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C021',\n  'obj': 5.774149693561629e-17},\n {'fragment_a': 'A014',\n  'fragment_b': 'B014',\n  'fragment_c': 'C022',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B025',\n  'fragment_c': 'C027',\n  'obj': 3.7577682225114775e-18},\n {'fragment_a': 'A012',\n  'fragment_b': 'B014',\n  'fragment_c': 'C007',\n  'obj': 1.18646011743689e-16},\n {'fragment_a': 'A002',\n  'fragment_b': 'B021',\n  'fragment_c': 'C039',\n  'obj': 4.237611907237047e-17},\n {'fragment_a': 'A010',\n  'fragment_b': 'B026',\n  'fragment_c': 'C032',\n  'obj': nan},\n {'fragment_a': 'A002',\n  'fragment_b': 'B021',\n  'fragment_c': 'C004',\n  'obj': nan},\n {'fragment_a': 'A016',\n  'fragment_b': 'B022',\n  'fragment_c': 'C043',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B016',\n  'fragment_c': 'C042',\n  'obj': nan},\n {'fragment_a': 'A010',\n  'fragment_b': 'B011',\n  'fragment_c': 'C004',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B017',\n  'fragment_c': 'C026',\n  'obj': nan},\n {'fragment_a': 'A017',\n  'fragment_b': 'B017',\n  'fragment_c': 'C027',\n  'obj': nan},\n {'fragment_a': 'A002',\n  'fragment_b': 'B026',\n  'fragment_c': 'C013',\n  'obj': 8.359460322246241e-17},\n {'fragment_a': 'A014',\n  'fragment_b': 'B016',\n  'fragment_c': 'C011',\n  'obj': nan},\n {'fragment_a': 'A002',\n  'fragment_b': 'B011',\n  'fragment_c': 'C039',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B012',\n  'fragment_c': 'C004',\n  'obj': 4.651911176165383e-17},\n {'fragment_a': 'A016',\n  'fragment_b': 'B024',\n  'fragment_c': 'C032',\n  'obj': 6.738964119838765e-18},\n {'fragment_a': 'A014',\n  'fragment_b': 'B006',\n  'fragment_c': 'C005',\n  'obj': 6.679155177965171e-17},\n {'fragment_a': 'A016',\n  'fragment_b': 'B026',\n  'fragment_c': 'C017',\n  'obj': nan},\n {'fragment_a': 'A017',\n  'fragment_b': 'B024',\n  'fragment_c': 'C034',\n  'obj': 1.4131711981022327e-17},\n {'fragment_a': 'A015',\n  'fragment_b': 'B010',\n  'fragment_c': 'C014',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B013',\n  'fragment_c': 'C005',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B024',\n  'fragment_c': 'C007',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B006',\n  'fragment_c': 'C014',\n  'obj': 6.525903364971338e-18},\n {'fragment_a': 'A017',\n  'fragment_b': 'B024',\n  'fragment_c': 'C023',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B002',\n  'fragment_c': 'C013',\n  'obj': nan},\n {'fragment_a': 'A016',\n  'fragment_b': 'B005',\n  'fragment_c': 'C032',\n  'obj': nan},\n {'fragment_a': 'A007',\n  'fragment_b': 'B026',\n  'fragment_c': 'C032',\n  'obj': nan},\n {'fragment_a': 'A017',\n  'fragment_b': 'B024',\n  'fragment_c': 'C022',\n  'obj': 1.3451843195023162e-17},\n {'fragment_a': 'A011',\n  'fragment_b': 'B007',\n  'fragment_c': 'C027',\n  'obj': nan},\n {'fragment_a': 'A017',\n  'fragment_b': 'B007',\n  'fragment_c': 'C015',\n  'obj': 9.206727195235754e-18},\n {'fragment_a': 'A014',\n  'fragment_b': 'B006',\n  'fragment_c': 'C013',\n  'obj': 7.923815265915032e-18},\n {'fragment_a': 'A002',\n  'fragment_b': 'B007',\n  'fragment_c': 'C025',\n  'obj': nan},\n {'fragment_a': 'A032',\n  'fragment_b': 'B016',\n  'fragment_c': 'C025',\n  'obj': nan},\n {'fragment_a': 'A002',\n  'fragment_b': 'B016',\n  'fragment_c': 'C025',\n  'obj': nan},\n {'fragment_a': 'A015',\n  'fragment_b': 'B023',\n  'fragment_c': 'C036',\n  'obj': 1.754540316783665e-17},\n {'fragment_a': 'A015',\n  'fragment_b': 'B020',\n  'fragment_c': 'C036',\n  'obj': nan},\n {'fragment_a': 'A012',\n  'fragment_b': 'B011',\n  'fragment_c': 'C011',\n  'obj': 6.40921915834097e-17},\n {'fragment_a': 'A015',\n  'fragment_b': 'B002',\n  'fragment_c': 'C041',\n  'obj': 5.730015594568486e-19},\n {'fragment_a': 'A012',\n  'fragment_b': 'B007',\n  'fragment_c': 'C001',\n  'obj': 9.244598780085763e-17},\n {'fragment_a': 'A012',\n  'fragment_b': 'B009',\n  'fragment_c': 'C010',\n  'obj': 6.846003907017119e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B006',\n  'fragment_c': 'C014',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B023',\n  'fragment_c': 'C042',\n  'obj': nan},\n {'fragment_a': 'A011',\n  'fragment_b': 'B006',\n  'fragment_c': 'C007',\n  'obj': 7.731345439360771e-17},\n {'fragment_a': 'A016',\n  'fragment_b': 'B011',\n  'fragment_c': 'C017',\n  'obj': nan},\n {'fragment_a': 'A015',\n  'fragment_b': 'B001',\n  'fragment_c': 'C014',\n  'obj': 2.523547276948713e-17},\n {'fragment_a': 'A012',\n  'fragment_b': 'B016',\n  'fragment_c': 'C025',\n  'obj': 1.00314069049024e-16},\n {'fragment_a': 'A017',\n  'fragment_b': 'B012',\n  'fragment_c': 'C026',\n  'obj': 4.950532097586806e-18},\n {'fragment_a': 'A010',\n  'fragment_b': 'B010',\n  'fragment_c': 'C020',\n  'obj': 1.0083667809612752e-17},\n {'fragment_a': 'A016',\n  'fragment_b': 'B021',\n  'fragment_c': 'C006',\n  'obj': nan},\n {'fragment_a': 'A010',\n  'fragment_b': 'B015',\n  'fragment_c': 'C058',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C026',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C043',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B008',\n  'fragment_c': 'C022',\n  'obj': 6.112709672620424e-18},\n {'fragment_a': 'A011',\n  'fragment_b': 'B022',\n  'fragment_c': 'C043',\n  'obj': 2.9033219264089226e-17},\n {'fragment_a': 'A032',\n  'fragment_b': 'B022',\n  'fragment_c': 'C034',\n  'obj': 3.303392062973488e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C026',\n  'obj': 5.533548486096295e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C023',\n  'obj': 8.889847034437943e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C024',\n  'obj': 1.4220443754121085e-16},\n {'fragment_a': 'A002',\n  'fragment_b': 'B026',\n  'fragment_c': 'C035',\n  'obj': 4.201224852544019e-17},\n {'fragment_a': 'A011',\n  'fragment_b': 'B016',\n  'fragment_c': 'C025',\n  'obj': 1.0106786073004218e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B018',\n  'fragment_c': 'C032',\n  'obj': 5.693911247335016e-17},\n {'fragment_a': 'A017',\n  'fragment_b': 'B002',\n  'fragment_c': 'C032',\n  'obj': 1.0966663481608477e-17},\n {'fragment_a': 'A012',\n  'fragment_b': 'B002',\n  'fragment_c': 'C041',\n  'obj': 2.921517766345191e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B007',\n  'fragment_c': 'C006',\n  'obj': 9.004995950322481e-18},\n {'fragment_a': 'A011',\n  'fragment_b': 'B016',\n  'fragment_c': 'C036',\n  'obj': 8.765202846540386e-17},\n {'fragment_a': 'A017',\n  'fragment_b': 'B018',\n  'fragment_c': 'C023',\n  'obj': 1.5526620557867162e-17},\n {'fragment_a': 'A016',\n  'fragment_b': 'B019',\n  'fragment_c': 'C058',\n  'obj': 8.19820155674067e-17},\n {'fragment_a': 'A015',\n  'fragment_b': 'B008',\n  'fragment_c': 'C036',\n  'obj': 4.6124037317905746e-18},\n {'fragment_a': 'A002',\n  'fragment_b': 'B004',\n  'fragment_c': 'C042',\n  'obj': nan},\n {'fragment_a': 'A011',\n  'fragment_b': 'B001',\n  'fragment_c': 'C043',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C028',\n  'obj': 1.4483124197741937e-16},\n {'fragment_a': 'A017',\n  'fragment_b': 'B025',\n  'fragment_c': 'C032',\n  'obj': 1.2990177468957796e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C022',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C025',\n  'obj': 1.0523847768248343e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C022',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C043',\n  'obj': 7.808046333127821e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C024',\n  'obj': 6.468748207729169e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C018',\n  'obj': 2.09633619724748e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C019',\n  'obj': 8.236931948493235e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C023',\n  'obj': 1.2548463592385985e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C020',\n  'obj': 2.1298908476023633e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C021',\n  'obj': 1.4618306676436623e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C025',\n  'obj': 1.189922738375221e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B024',\n  'fragment_c': 'C028',\n  'obj': 1.281002844906603e-16},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C011',\n  'obj': nan},\n {'fragment_a': 'A032',\n  'fragment_b': 'B020',\n  'fragment_c': 'C037',\n  'obj': nan},\n {'fragment_a': 'A017',\n  'fragment_b': 'B023',\n  'fragment_c': 'C032',\n  'obj': nan},\n {'fragment_a': 'A010',\n  'fragment_b': 'B004',\n  'fragment_c': 'C042',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C030',\n  'obj': 4.384016890595388e-17},\n {'fragment_a': 'A014',\n  'fragment_b': 'B002',\n  'fragment_c': 'C017',\n  'obj': nan},\n {'fragment_a': 'A014',\n  'fragment_b': 'B020',\n  'fragment_c': 'C027',\n  'obj': 1.0739333166057634e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B013',\n  'fragment_c': 'C018',\n  'obj': 3.967021469424605e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B022',\n  'fragment_c': 'C025',\n  'obj': 8.580904666671667e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C042',\n  'obj': 1.5779875470119115e-16},\n {'fragment_a': 'A015',\n  'fragment_b': 'B022',\n  'fragment_c': 'C010',\n  'obj': nan},\n {'fragment_a': 'A011',\n  'fragment_b': 'B008',\n  'fragment_c': 'C020',\n  'obj': nan},\n {'fragment_a': 'A016',\n  'fragment_b': 'B017',\n  'fragment_c': 'C043',\n  'obj': nan},\n {'fragment_a': 'A016',\n  'fragment_b': 'B018',\n  'fragment_c': 'C017',\n  'obj': nan},\n {'fragment_a': 'A016',\n  'fragment_b': 'B026',\n  'fragment_c': 'C016',\n  'obj': nan},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C044',\n  'obj': 1.5754107488570007e-16},\n {'fragment_a': 'A017',\n  'fragment_b': 'B013',\n  'fragment_c': 'C005',\n  'obj': 1.5061609372299598e-17},\n {'fragment_a': 'A001',\n  'fragment_b': 'B001',\n  'fragment_c': 'C014',\n  'obj': 3.0894372345716633e-17},\n {'fragment_a': 'A014',\n  'fragment_b': 'B017',\n  'fragment_c': 'C031',\n  'obj': nan}]"
      },
-     "execution_count": 9,
+     "execution_count": 17,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -299,7 +299,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 18,
    "id": "6b861cd3",
    "metadata": {
     "pycharm": {
@@ -317,7 +317,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 19,
    "id": "0e3bb1fb",
    "metadata": {
     "pycharm": {
@@ -358,7 +358,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 20,
    "id": "1150b009",
    "metadata": {
     "pycharm": {
Index: recommendations/general/LaserDataHandler.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/recommendations/general/LaserDataHandler.py b/recommendations/general/LaserDataHandler.py
new file mode 100644
--- /dev/null	(date 1660763925630)
+++ b/recommendations/general/LaserDataHandler.py	(date 1660763925630)
@@ -0,0 +1,120 @@
+import numpy as np
+import pandas as pd
+from typing import Tuple, Callable, List, Dict
+
+from ChemicalReaction import ChemicalReaction
+from MolarInterface import MolarInterface
+
+
+class LaserDataHandler(MolarInterface):
+
+    def __init__(self, db_name: str, fragments: tuple, active_labs: tuple):
+        super().__init__(db_name=db_name, fragments=fragments)
+
+        self.active_labs = active_labs
+        self.available_fragments: dict = {lab: {frag: set() for frag in fragments} for lab in active_labs}
+
+        self.all_previous_results = None
+
+    def load_previous_results(self) -> Tuple[pd.DataFrame, pd.DataFrame]:
+        """
+        Queries the database for all previously generated syntheses.
+        Returns the syntheses in progress (for generating constraints) and the completed syntheses (for generating
+        training data).
+
+        Returns:
+            in_progress: Dataframe of all syntheses in progress
+            completed: Dataframe of all completed syntheses.
+        """
+        self.all_previous_results = self.get_all_syntheses()
+
+        in_progress = self.all_previous_results[self.all_previous_results["synthesis.status"].isin(["AVAILABLE, ""ACQUIRED", "PROCESSING", "SYNTHESIZED", "SHIPPED", "RECEIVED"])]
+        completed = self.all_previous_results[self.all_previous_results["synthesis.status"].isin(["DONE", "FAILED"])]
+
+        return in_progress, completed
+
+    def process_previous_results(self, previous_results: pd.DataFrame, get_target_property: Callable) -> Tuple[List[dict], Dict[str, set]]:
+        """
+        Processes the previous results by extracting the used fragments and the measured objective values.
+
+        Args:
+            previous_results: Dataframe of previous results
+            get_target_property: Function to access the objective value from a single row
+
+        Returns:
+            observations: List of observations, as required for the Gryffin call (each observation as a dictionary)
+            used_fragments: Dictionary of used fragments.
+        """
+        observations: list = []
+        used_fragments: dict = {frag: set() for frag in self._fragments}
+
+        for _, row in previous_results.iterrows():
+            row = row.to_dict()
+            data: dict = dict()
+
+            # Add fragment hids to the data and the overview of used fragments
+            for frag in self._fragments:
+                data[frag] = row[f"{frag}.hid"]
+                used_fragments[frag].add(row[f"{frag}.hid"])
+
+            # Extract target information
+            try:
+                data["obj"] = get_target_property(row) if get_target_property(row) else np.nan
+            except KeyError:
+                data["obj"] = np.nan
+
+            observations.append(data)
+
+        return observations, used_fragments
+
+    def get_all_available_fragments(self):
+
+        all_available_fragments = {frag: set() for frag in self._fragments}
+
+        for lab in self.active_labs:
+            for frag in self._fragments:
+                self.available_fragments[lab][frag] = set(self.get_available_fragments(frag, lab)["molecule.hid"])
+                all_available_fragments[frag].update(self.available_fragments[lab][frag])
+
+        return all_available_fragments
+
+    def target_is_makable(self, parameters: dict, *labs) -> bool:
+        """
+        Checks if a target can be made in a single location (i.e. all fragments are available at one spot).
+
+        Args:
+            parameters: Dictionary of parameters (needs the fragments as keys)
+
+        Returns:
+            bool: True if the target can be made.
+        """
+        for lab in labs:
+            if all([parameters[frag] in self.available_fragments[lab][frag] for frag in self._fragments]):
+                return True
+        return False
+
+    def target_is_novel(self, parameters: dict) -> bool:
+        """
+        Checks if a target is novel (i.e. has never been made before
+        Args:
+            parameters:
+
+        Returns:
+
+        """
+        hid = "".join([parameters[frag] for frag in self._fragments])
+        return hid not in self.all_previous_results["product.hid"].values
+
+
+def run_two_step_suzuki(smiles_a: str, smiles_b: str, smiles_c: str) -> str:
+    first_step = ChemicalReaction(
+        "[C,c:1]B([OH])[OH].[C,c:2][Br,I]>>[C,c:1][C,c:2]",
+        "[C,c:1]B1OC(C)(C)C(C)(C)O1.[C,c:2][Br,I]>>[C,c:1][C,c:2]"
+    )
+    second_step = ChemicalReaction(
+        "[C,c:1]B1OC(=O)CN(C)CC(=O)O1.[C,c:2][Br,1]>>[C,c:1][C,c:2]"
+    )
+    intermediate: str = first_step(smiles_a, smiles_b)
+    product: str = second_step(intermediate, smiles_c)
+
+    return product
