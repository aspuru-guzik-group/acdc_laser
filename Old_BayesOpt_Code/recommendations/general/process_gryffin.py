from typing import Tuple, List, Dict
import datetime
from pathlib import Path
from rdkit import Chem
from rdkit.Chem import Draw
from Tools.LaserDataHandler import LaserDataHandler
from Tools.TwoStepSuzuki import run_two_step_suzuki
from Tools.FileHandling import load_json, load_pkl


def process_recommendations(recommendations: List[dict], handler: LaserDataHandler, labs: list) -> None:
    """
    Processes the recommendations by drawing a grid image, writing a txt file with all recommendations, and saving the
    recommendations to the database.

    Args:
        recommendations: List of new recommendations by Gryffin.
        handler: LaserDataHandler object (database access and data processing)
        labs: List of labs for which the recommendations are generated.
    """
    iteration_name: str = datetime.date.today().strftime("%Y%m%d")

    with open(f"Recommendations/Iteration_{iteration_name}_{'_'.join(labs)}_all_samples.txt", "w") as file:
        for entry in recommendations:

            # Generate the Product SMILES and HID
            frag_smiles = [handler.get_molecule(entry[frag]).at[0, "smiles"] for frag in entry if "fragment" in frag]
            entry["smiles"] = run_two_step_suzuki(*frag_smiles)
            entry["hid"] = "".join([entry[frag] for frag in entry if "fragment" in frag])

            # Write to File and Upload to DB
            file.write(f"{entry['hid']},{entry['smiles']}\n")
            handler.create_target_compound(
                fragments=[entry[frag] for frag in entry if "fragment" in frag],
                smiles=entry["smiles"],
                procedure=entry["procedure"]
            )

    # Save Molecules as Grid Image
    img = Draw.MolsToGridImage(
        [Chem.MolFromSmiles(rec["smiles"]) for rec in recommendations],
        molsPerRow=5,
        subImgSize=(800, 800),
        legends=[rec["hid"] for rec in recommendations],
        returnPNG=False
    )
    img.save(f"Recommendations/Iteration_{iteration_name}_{'_'.join(labs)}_all_samples.png")


def load_input() -> list:
    """
    Loads the .pkl files generated by run_gryffin.py.

    Returns:
        recommendations: List of recommendations generated by Gryffin.
    """
    recommendations: list = load_pkl(Path.cwd() / "TMP_new_recommendations.pkl")
    return recommendations


def clear_tmp() -> None:
    """
    Clears all temporarily generated .pkl files.
    """
    for file in Path.cwd().glob("*.pkl"):
        file.unlink()


if __name__ == "__main__":
    config: dict = load_json(Path(__file__).parent / "gryffin_settings.json")

    data_handler = LaserDataHandler(
        db_name="madness_laser",
        fragments=("fragment_a", "fragment_b", "fragment_c"),
        active_labs=config["active_labs"]
    )

    recommendations = load_input()

    process_recommendations(recommendations, data_handler, config["active_labs"])

    clear_tmp()
