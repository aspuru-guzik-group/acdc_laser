import json
from pathlib import Path
import logging
from Data_Processing.HPLCMSExtractor_UofT import ThermoExtractor
from Data_Processing.SpectroscopyData import SpectroscopyData

from Helpers.DatabaseWorkflows import upload_to_database


def data_processing_workflow(
        completed_runs_dir: Path,
        hplc_raw_data_dir: Path,
        hplc_column_info: Path,
        optics_raw_data_dir: Path,
        optics_settings: Path
) -> None:
    """
    Runs the data processing workflow by processing all files contained in the "completed_runs_dir" folder (json files
    generated by the ChemspeedOperator characterization workflow).

    The workflow consists of the following steps (for each json file):
        1. Load the metadata file and extract the relevant information
        2. Convert the HPLC data to the standardized format
        3. Process the spectroscopy data (if the synthesis was successful)
        4. Upload the data to the database

    Args:
        completed_runs_dir: Path to the folder containing the metadata files for the completed runs.
        hplc_raw_data_dir: Path to the folder containing the raw HPLC data.
        hplc_column_info: Path to the json file containing the HPLC column information.
        optics_raw_data_dir: Path to the folder containing the raw optics data.
        optics_settings: Path to the json file containing the data processing settings for the optics data.
    """
    logging.basicConfig(level=logging.DEBUG)
    lcms_extractor = ThermoExtractor(column_info=hplc_column_info)

    # Iterates through the folder containing all metadata for the completed runs (as json files)
    for metadata_file in completed_runs_dir.glob("*.json"):

        # 1. Load the metadata file and extract the relevant information
        run_data = json.load(open(metadata_file, "r"))
        name, hid, smiles = run_data["name"], run_data["identifier"], run_data["smiles"]
        timestamp = name[-14:]
        synthesis_result = run_data["synthesis_result"]
        logging.info(f"Processing {hid} ({name}). Synthesis successful: {synthesis_result}.")

        # 2. Extract the HPLC data
        hplc_data_archive = lcms_extractor(hplc_raw_data_dir, name, Path.cwd())
        logging.info(f"Successfully extracted HPLC data for {hid} ({name}).")

        # 3. Extract the optics data
        if synthesis_result is True:
            spectroscopy_data = SpectroscopyData(optics_raw_data_dir, name, optics_settings)
            spectroscopy_results = spectroscopy_data()
            logging.info(f"Successfully extracted spectroscopy data for {hid} ({name}).")
        else:
            spectroscopy_results = {"validation_status": "failed synthesis"}

        # 4. Upload the data to the database
        upload_to_database(
            hid=hid,
            smiles=smiles,
            hplc_data=hplc_data_archive,
            spectroscopy_data=spectroscopy_results | {"timestamp": timestamp}
        )
        logging.info(f"Data Upload for {hid} completed.")


if __name__ == "__main__":
    data_processing_workflow(
        completed_runs_dir=Path.cwd() / "_raw_data" / "completed_runs",
        hplc_raw_data_dir=Path.cwd() / "_raw_data" / "raw_hplc_data",
        hplc_column_info=Path.cwd() / "Settings" / "Column_ThermoScientific Accucore Phenyl-Hexyl.json",
        optics_raw_data_dir=Path.cwd() / "_raw_data" / "raw_optics_data",
        optics_settings=Path.cwd() / "Settings" / "spectroscopy_settings.json"
    )